{
  "files": {
    "lecture_14.py": "from dataclasses import dataclass\nimport math\nimport torch\nimport torch.nn as nn\nfrom torch.nn.functional import softmax\nimport numpy as np\nimport kenlm\nimport fasttext\nimport itertools\nimport mmh3\nfrom bitarray import bitarray\nfrom basic_util import count, repeat\nfrom file_util import download_file\nfrom execute_util import text, image, link\nfrom lecture_util import article_link, named_link\nfrom references import dolma\n\ndef main():\n    text(\"Last lecture: overview of datasets used for training language models\")\n    text(\"- Live service (GitHub) \u2192 dump/crawl (GH Archive) \u2192 processed data (The Stack)\")\n    text(\"- Processing: HTML to text, language/quality/toxicity filtering, deduplication\")\n\n    text(\"This lecture: deep dive into the mechanics\")\n    text(\"- Algorithms for filtering (e.g., classifiers)\")\n    text(\"- Applications of filtering (e.g., language, quality, toxicity)\")\n    text(\"- Deduplication (e.g., Bloom filters, MinHash, LSH)\")\n\n    filtering_algorithms()\n    filtering_applications()\n    deduplication()\n\n    text(\"### Summary\")\n    text(\"- Algorithmic tools: n-gram models (KenLM), classifiers (fastText), importance resampling (DSIR)\")\n    text(\"- Applications: language identification, quality filtering, toxicity filtering\")\n    text(\"- Deduplication: hashing scales to large datasets for fuzzy matching\")\n    text(\"- Now you have the tools (mechanics), just have to spend time with data (intuitions)\")\n\n\ndef filtering_algorithms():\n    text(\"Algorithmic building block:\")\n    text(\"- Given some **target data** T and lots of **raw data** R, find subset T' of R similar to T.\")\n    image(\"images/raw-target-schema.png\", width=600)\n\n    text(\"Desiderata for filtering algorithm:\")\n    text(\"- Generalize from the target data (want T and T' to be different)\")\n    text(\"- Extremely fast (have to run it on R, which is huge)\")\n\n    kenlm_main()         # Train n-gram model\n    fasttext_main()      # Train a classifier\n    dsir_main()          # Train bag of n-grams model, do importance resampling\n    filtering_summary()\n\n    text(\"Survey paper on data selection \"), link(\"https://arxiv.org/abs/2402.16827\")\n\n\ndef kenlm_main():\n    text(\"**n-gram model with Kneser-Ney smoothing** \"), article_link(\"https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing\")\n    text(\"- KenLM: fast implementation originally for machine translation \"), named_link(\"code\", \"https://kheafield.com/code/kenlm/\")\n    text(\"- Common language model used for data filtering\")\n    text(\"- Extremely simple / fast - just count and normalize\")\n\n    text(\"### Concepts\")\n    text(\"Maximum likelihood estimation of n-gram language model:\")\n    text(\"- n = 3: p(in | the cat) = count(the cat in) / count(the cat)\")\n    text(\"Problem: sparse counts (count of many n-grams is 0 for large n)\")\n    text(\"Solution: Use Kneser-Ney smoothing to handle unseen n-grams \"), article_link(\"https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing\")\n    text(\"- p(in | the cat) depends on p(in | cat) too\")\n\n    # Download a KenLM language model\n    model_url = \"https://huggingface.co/edugp/kenlm/resolve/main/wikipedia/en.arpa.bin\"\n    model_path = \"var/en.arpa.bin\"\n    download_file(model_url, model_path)\n    model = kenlm.Model(model_path)\n\n    # Use the language model\n    def compute(content: str):\n        # Hacky preprocessing\n        content = \"<s> \" + content.replace(\",\", \" ,\").replace(\".\", \" .\") + \" </s>\"\n\n        # log p(content)\n        score = model.score(content)\n\n        # Perplexity normalizes by number of tokens to avoid favoring short documents\n        num_tokens = len(list(model.full_scores(content)))\n        perplexity = math.exp(-score / num_tokens)\n\n        return score, perplexity\n\n    score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity\n    score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity\n    score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity\n    score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity\n\n    text(\"### CCNet\")\n    link(\"https://arxiv.org/pdf/1911.00359\")\n    text(\"- Items are paragraphs of text\")\n    text(\"- Sort paragraphs by increasing perplexity\")\n    text(\"- Keep the top 1/3\")\n    text(\"- Was used in LLaMA\")\n\n    text(\"Summary: Kneser-Ney n-gram language models (with KenLM implementation) is fast but crude\")\n\n\ndef fasttext_main():\n    text(\"fastText classifier \"), link(\"https://arxiv.org/pdf/1607.01759\")\n    text(\"- Task: text classification (e.g., sentiment classification)\")\n    text(\"- Goal was to train a fast classifier for text classification\")\n    text(\"- They found it was as good as much slower neural network classifiers\")\n\n    text(\"### Baseline: bag of words (not what they did)\")\n    L = 32                              # Length of input\n    V = 8192                            # Vocabulary size\n    K = 64                              # Number of classes\n    W = nn.Embedding(V, K)              # Embedding parameters (V x K)\n    x = torch.randint(V, (L,))          # Input tokens (L) - e.g., [\"the\", \"cat\", \"in\", \"the\", \"hat\"]\n    y = softmax(W(x).mean(dim=0))       # Output probabilities (K)\n    text(\"Problem: V*K parameters (could be huge)\")\n\n    text(\"### fastText classifier: bag of word embeddings\")\n    H = 16                              # Hidden dimension\n    W = nn.Embedding(V, H)              # Embedding parameters (V x H)\n    U = nn.Linear(H, K)                 # Head parameters (H x K)\n    y = softmax(U(W(x).mean(dim=0)))    # Output probabilities (K)\n    text(\"Only H*(V + K) parameters\")\n\n    text(\"Implementation:\")\n    text(\"- Parallelized, asynchronous SGD\")\n    text(\"- Learning rate: linear interpolation from [some number] to 0 \"), article_link(\"https://github.com/facebookresearch/fastText/blob/main/src/fasttext.cc#L653\")\n\n    text(\"### Bag of n-grams\")\n    x = [\"the cat\", \"cat in\", \"in the\", \"the hat\"]  # @inspect x\n    text(\"Problem: number of bigrams can get large (and also be unbounded)\")\n    text(\"Solution: hashing trick\")\n    num_bins = 8  # In practice, 10M bins\n    hashed_x = [hash(bigram) % num_bins for bigram in x]  # @inspect hashed_x\n\n    text(\"- For quality filtering, we have K = 2 classes (good versus bad)\")\n    text(\"- In that case, fastText is just a linear classifier (H = K = 2)\")\n\n    text(\"In general, can use any classifier (e.g., BERT, Llama), it's just slower\")\n\n\ndef dsir_main():\n    text(\"Data Selection for Language Models via Importance Resampling (DSIR) \"), link(\"https://arxiv.org/abs/2302.03169\")\n    image(\"https://www.jinghong-chen.net/content/images/size/w1200/2023/12/Screenshot-2023-12-24-at-17.41.38.png\", width=600)\n\n    importance_sampling()\n\n    text(\"Setup:\")\n    text(\"- Target dataset D_p (small)\")\n    text(\"- Proposal (raw) dataset D_q (large)\")\n\n    text(\"Take 1:\")\n    text(\"- Fit target distribution p to D_p\")\n    text(\"- Fit proposal distribution q to D_q\")\n    text(\"- Do importance resampling with p, q, and raw samples D_q\")\n    text(\"Problem: target data D_p is too small to estimate a good model\")\n\n    text(\"Take 2: use hashed n-grams\")\n    training_text = \"the cat in the hat\"\n\n    # Hash the n-grams\n    num_bins = 4\n    def get_hashed_ngrams(text: str):\n        ngrams = text.split(\" \")  # Unigram for now\n        return [hash(ngram) % num_bins for ngram in ngrams]\n\n    training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams\n\n    # Learn unigram model\n    probs = [count(training_hashed_ngrams, x) / len(training_hashed_ngrams) for x in range(num_bins)]  # @inspect probs\n\n    # Evaluate probability of any sentence\n    hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams\n    prob = np.prod([probs[x] for x in hashed_ngrams])  # @inspect prob\n    text(\"Result: DSIR slightly better than heuristic classification (fastText) on the [GLUE](https://gluebenchmark.com/) benchmark\")\n    image(\"images/dsir-results.png\", width=700)\n    \n    text(\"Comparison with fastText:\")\n    text(\"- Modeling distributions is a more principled approach capturing diversity\")\n    text(\"- Similar computation complexity\")\n    text(\"- Both can be improved by better modeling\")\n\n\ndef importance_sampling():\n    text(\"Setup:\")\n    text(\"- Target distribution p (want samples from here)\")\n    text(\"- Proposal distribution q (have samples from here)\")\n\n    vocabulary = [0, 1, 2, 3]\n    p = [0.1, 0.2, 0.3, 0.4]\n    q = [0.4, 0.3, 0.2, 0.1]\n\n    # 1. Sample from q\n    n = 100\n    samples = np.random.choice(vocabulary, p=q, size = n)  # @inspect samples\n    text(f\"Samples (q): {samples}\")\n\n    # 2. Compute weights over samples (w \\propto p/q)\n    w = [p[x] / q[x] for x in samples]  # @inspect w\n    z = sum(w)  # @inspect z\n    w = [w_i / z for w_i in w]  # @inspect w\n\n    # 3. Resample\n    samples = np.random.choice(samples, p=w, size=n)  # @inspect samples\n    text(f\"Resampled (p): {samples}\")\n\n\ndef filtering_summary():\n    text(\"Implementations: KenLM, fastText, DSIR\")\n\n    text(\"### General framework\")\n    text(\"Given target T and raw R, find subset of R similar to T\")\n    text(\"1. Estimate some model based on R and T and derive a scoring function\")\n    text(\"2. Keep examples in R based on their score\")\n\n    text(\"### Instantiations of the framework\")\n\n    text(\"Generative model of T (KenLM):\")\n    text(\"1. score(x) = p_T(x)\")\n    text(\"2. Keep examples x with score(x) >= threshold (stochastically)\")\n\n    text(\"Discriminative classifier (fastText):\")\n    text(\"1. score(x) = p(T | x)\")\n    text(\"2. Keep examples x with score(x) >= threshold (stochastically)\")\n\n    text(\"Importance resampling (DSIR):\")\n    text(\"1. score(x) = p_T(x) / p_R(x)\")\n    text(\"2. Resample examples x with probability proportional to score(x)\")\n\n\ndef filtering_applications():\n    text(\"The same data filtering machinery can be used for different filtering tasks.\")\n    language_identification()\n    quality_filtering()\n    toxicity_filtering()\n\n\ndef language_identification():\n    text(\"Language identification: find text of a specific language (e.g., English)\")\n\n    text(\"Why not just go multilingual?\")\n    text(\"- Data: difficult to do curation / processing of high-quality data in any given language\")\n    text(\"- Compute: in computed-limited regime, less compute/tokens dedicated to any given language\")\n    text(\"Models differ on multilinguality:\")\n    text(\"- English was only 30% of BLOOM (was undertrained), English performance suffered \"), link(\"https://arxiv.org/pdf/2303.03915\")\n    text(\"- Most frontier models (GPT-4, Claude, Gemini, Llama, Qwen) are heavily multilingual (sufficiently trained)\")\n\n    text(\"fastText language identification \"), article_link(\"https://fasttext.cc/docs/en/language-identification.html\")\n    text(\"- Off-the-shelf classifier\")\n    text(\"- Supports 176 languages\")\n    text(\"- Trained on multilingual sites: Wikipedia, Tatoeba (translation site) and SETimes (Southeast European news)\")\n\n    text(\"Example: Dolma keeps pages with p(English) >= 0.5 \"), link(dolma)\n    \n    # Download the model\n    model_url = \"https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin\"\n    model_path = \"var/lid.176.bin\"\n    download_file(model_url, model_path)\n    model = fasttext.load_model(model_path)\n\n    # Make predictions\n    predictions = model.predict([\"The quick brown fox jumps over the lazy dog.\"])  # English @inspect predictions\n    predictions = model.predict([\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"])  # Duplicate @inspect predictions\n    predictions = model.predict([\"OMG that movie was \ud83d\udd25\ud83d\udd25! So dope \ud83d\ude0e\ud83e\udd18!\"])  # Informal English @inspect predictions\n    predictions = model.predict([\"Auf dem Wasser zu singen\"])  # German @inspect predictions\n    predictions = model.predict([\"The quadratic formula is $x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}$.\"])  # Latex @inspect predictions\n    predictions = model.predict([\"for (int i = 0; i < 10; i++)\"])  # C++ @inspect predictions\n    predictions = model.predict([\"Hello!\"])  # English @inspect predictions\n    predictions = model.predict([\"Bonjour!\"])  # French @inspect predictions\n    predictions = model.predict([\"Feliz Navidad / Pr\u00f3spero a\u00f1o y felicidad / I wanna wish you a Merry Christmas\"])  # Spanish + English @inspect predictions\n\n    text(\"Caveats:\")\n    text(\"- Difficult for short sequences\")\n    text(\"- Difficult for low-resource languages\")\n    text(\"- Could accidentally filter out dialects of English\")\n    text(\"- Hard for similar languages (Malay and Indonesian)\")\n    text(\"- Ill-defined for code-switching (e.g., Spanish + English)\")\n\n    text(\"OpenMathText \"), link(\"https://arxiv.org/pdf/2310.06786\")\n    text(\"- Goal: curate large corpus of mathematical text from CommonCrawl\")\n    text(\"- Use rules to filter (e.g., contains latex commands)\")\n    text(\"- KenLM trained on ProofPile, keep if perplexity < 15000\")\n    text(\"- Trained fastText classifier to predict mathematical writing, threshold is 0.17 if math, 0.8 if no math\")\n    text(\"Result: produced 14.7B tokens, used to train 1.4B models that do better than models trained on 20x data\")\n\n\ndef quality_filtering():\n    text(\"- Some deliberately do not use model-based filtering (C4, Gopher, RefinedWeb, FineWeb, Dolma)\")\n    text(\"- Some use model-based filtering (GPT-3, LLaMA, DCLM) [becoming the norm]\")\n\n    text(\"**GPT-3** \"), link(\"https://arxiv.org/pdf/2005.14165\")  # Appendix A\n    text(\"- Positives: samples from {Wikipedia, WebText2, Books1, Books2}\")\n    text(\"- Negatives: samples from CommonCrawl\")\n    image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Probability_density_function_of_Pareto_distribution.svg/325px-Probability_density_function_of_Pareto_distribution.svg.png\", width=0.5)\n    text(\"Train linear classifier based on word features \"), article_link(\"https://spark.apache.org/docs/latest/ml-features#tokenizer\")\n    text(\"Keep documents stochastically based on score\")\n    def keep_document(score: float) -> bool:\n        return np.random.pareto(9) > 1 - score\n\n    text(\"** LLaMA/RedPajama** \"), link(\"https://arxiv.org/pdf/2302.13971\")\n    text(\"- Positives: samples from pages **referenced** by Wikipedia\")\n    text(\"- Negatives: samples from CommonCrawl\")\n    text(\"- Keep documents that are classified positive\")\n\n    text(\"**phi-1** \"), link(\"https://arxiv.org/pdf/2306.11644\")\n    text(\"Philosophy: really high quality data (textbooks) to train a small model (1.5B)\")\n    text(\"Includes synthetic data from GPT 3.5 (later: GPT-4) and filtered data\")\n\n    R = \"Python subset of the Stack\"   # Raw data\n    prompt = \"determine its educational value for a student whose goal is to learn basic coding concepts\"\n    T = \"Use GPT-4 with this prompt to classify 100K subset of R to get positive examples\"\n    text(\"Train random forest classifier on T using output embedding from pretrained codegen model\")\n    text(\"Select data from R that is classified positive by the classifier\")\n\n    text(\"Result on [HumanEval](https://huggingface.co/datasets/openai_humaneval):\")\n    text(\"- Train 1.3B LM on Python subset of The Stack (performance: 12.19% after 96K steps)\")\n    text(\"- Train 1.3B LM on new filtered subset (performance: 17.68% after 36K steps) - better!\")\n\n\n@dataclass\nclass Example:\n    text: str\n    label: int\n\n\ndef toxicity_filtering():\n    # WARNING: potentially offensive content below\n    text(\"Toxicity filtering in Dolma \"), link(dolma)\n    \n    text(\"Dataset: Jigsaw Toxic Comments dataset (2018) \"), named_link(\"dataset\", \"https://www.kaggle.com/datasets/julian3833/jigsaw-toxic-comment-classification-challenge\")\n    text(\"- Project goal: help people have better discussions online \"), article_link(\"https://www.kaggle.com/competitions/jigsaw-toxic-comment-classification-challenge/discussion/46064\")\n    text(\"- Data: comments on Wikipedia talk page annotated with {toxic, severe_toxic, obscene, threat, insult, identity_hate}\")\n\n    text(\"Trained 2 fastText classifiers\")\n    text(\"- hate: positive = {unlabeled, obscene}, negative = all else\")\n    text(\"- NSFW: positive = {obscene}, negative = all else\")\n\n    # Examples from the dataset: (obscene, text)\n    train_examples = [\n        Example(label=0, text=\"Are you threatening me for disputing neutrality? I know in your country it's quite common to bully your way through a discussion and push outcomes you want. But this is not Russia.\"),\n        Example(label=1, text=\"Stupid peace of shit stop deleting my stuff asshole go die and fall in a hole go to hell!\"),\n    ]\n\n    # Download model\n    model_url = \"https://dolma-artifacts.org/fasttext_models/jigsaw_fasttext_bigrams_20230515/jigsaw_fasttext_bigrams_nsfw_final.bin\"\n    model_path = \"var/jigsaw_fasttext_bigrams_nsfw_final.bin\"\n    download_file(model_url, model_path)\n    model = fasttext.load_model(model_path)\n\n    # Make predictions\n    predictions = model.predict([train_examples[0].text])  # @inspect predictions\n    predictions = model.predict([train_examples[1].text])  # @inspect predictions\n    predictions = model.predict([\"I love strawberries\"])  # @inspect predictions\n    predictions = model.predict([\"I hate strawberries\"])  # @inspect predictions\n\n\ndef print_predict(model, content):\n    \"\"\"Run classifier `model` on `content` and print out the results.\"\"\"\n    predictions = model.predict([content])\n    print(predictions)\n    #labels, prob =\n    #labels = \", \".join(labels)\n    #text(f\"{content} => {labels} {prob}\")\n\n\ndef deduplication():\n    text(\"Two types of duplicates:\")\n    text(\"- Exact duplicates (mirror sites, GitHub forks) \"), named_link(\"Gutenberg mirrors\", \"https://www.gutenberg.org/MIRRORS.ALL\")\n    text(\"- Near duplicates: same text differing by a few tokens\")\n\n    text(\"Examples of near duplicates:\")\n    text(\"- Terms of service and licenses \"), named_link(\"MIT license\", \"https://opensource.org/license/mit\")\n    text(\"- Formulaic writing (copy/pasted or generated from a template) \"), image(\"https://d3i71xaburhd42.cloudfront.net/4566c0d22ebf3c31180066ab23b6c445aeec78d5/5-Table1-1.png\", width=600)\n    text(\"- Minor formatting differences in copy/pasting\")\n\n    text(\"Product description repeated 61,036 times in C4\")\n    text(\"'\u201cby combining fantastic ideas, interesting arrangements, and follow the current trends in the field of that make you more inspired and give artistic touches. We\u2019d be honored if you can apply some or all of these design in your wedding.  believe me, brilliant ideas would be perfect if it can be applied in real and make the people around you amazed!\")\n    named_link(\"example page\", \"https://www.amazon.co.uk/suryagede-100-Graffiti-Gas-Mask/dp/B07CRHT3RG\")\n\n    text(\"Deduplication training data makes language models better \"), link(\"https://arxiv.org/pdf/2107.06499\")\n    text(\"- Train more efficiently (because have fewer tokens)\")\n    text(\"- Avoid memorization (can mitigate copyright, privacy concerns)\")\n\n    text(\"Design space:\")\n    text(\"1. What is an item (sentence, paragraph, document)?\")\n    text(\"2. How to match (exact match, existence of common subitem, fraction of common subitems)?\")\n    text(\"3. What action to take (remove all, remove all but one)?\")\n\n    text(\"Key challenge:\")\n    text(\"- Deduplication is fundamentally about comparing items to other items\")\n    text(\"- Need linear time algorithms to scale\")\n\n    hash_functions()\n\n    exact_deduplication()\n    bloom_filter()\n\n    jaccard_minhash()\n    locality_sensitive_hashing()\n\n\ndef hash_functions():\n    text(\"- Hash function h maps item to a hash value (integer or string)\")\n    text(\"- Hash value much smaller than item\")\n    text(\"- Hash collision: h(x) = h(y) for x \u2260 y\")\n\n    text(\"Tradeoff between efficiency and collision resistance \"),  article_link(\"https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed\")\n    text(\"- Cryptographic hash functions (SHA-256): collision resistant, slow (used in bitcoin)\")\n    text(\"- DJB2, MurmurHash, CityHash: not collision resistant, fast (used for hash tables)\")\n\n    text(\"We will use MurmurHash:\")\n    h = mmh3.hash(\"hello\")  # @inspect h\n\n\ndef exact_deduplication():\n    text(\"**Simple example**\")\n    text(\"1. Item: string\")\n    text(\"2. How to match: exact match\")\n    text(\"3. Action: remove all but one\")\n\n    # Original items\n    items = [\"Hello!\", \"hello\", \"hello there\", \"hello\", \"hi\", \"bye\"]  # @inspect items\n\n    # Compute hash -> list of items with that hash\n    hash_items = itertools.groupby(sorted(items, key=mmh3.hash), key=mmh3.hash)\n\n    # Keep one item from each group\n    deduped_items = [next(group) for h, group in hash_items]  # @inspect deduped_items\n\n    text(\"- Pro: simple, clear semantics, high precision\")\n    text(\"- Con: does not deduplicate near duplicates\")\n    text(\"- This code is written in a MapReduce way, can easily parallelize and scale\")\n\n    text(\"**C4** \"), link(\"https://arxiv.org/pdf/1910.10683v4\")\n    text(\"1. Item: 3-sentence spans\")\n    text(\"2. How to match: use exact match\")\n    text(\"3. Action: remove all but one\")\n    text(\"Warning: when a 3-sentence span is removed from the middle of a document, the resulting document might not be coherent\")\n\n\ndef bloom_filter():\n    text(\"Goal: efficient, approximate data structure for testing set membership\")\n\n    text(\"Features of Bloom filters\")\n    text(\"- Memory efficient\")\n    text(\"- Can update, but can't delete\")\n    text(\"- If return 'no', definitely 'no'\")\n    text(\"- If return 'yes', most likely 'yes', but small probability of 'no'\")\n    text(\"- Can drive the false positive rate down exponentially with more time/compute\")\n\n    items = [\"the\", \"cat\", \"in\", \"the\", \"hat\"]\n    non_items = [\"what\", \"who\", \"why\", \"when\", \"where\", \"which\", \"how\"]\n\n    text(\"First, make the range of hash function small (small number of bins).\")\n    m = 8  # Number of bins\n    table = build_table(items, m)\n    for item in items:\n        assert query_table(table, item, m) == 1\n    result = {item: query_table(table, item, m) for item in non_items}  # @inspect result\n    num_mistakes = count(result.values(), True)  # @inspect num_mistakes\n    false_positive_rate = num_mistakes / (len(items) + num_mistakes)  # @inspect false_positive_rate\n    text(\"Problem: false positives for small bins\")\n\n    text(\"Naive solution: increase the number of bins\")\n    text(\"Error probability is O(1/num_bins), decreases polynomially with memory\")\n\n    text(\"Better solution: use more hash functions\")\n    k = 2  # Number of hash functions\n    table = build_table_k(items, m, k)\n    for item in items:\n        assert query_table_k(table, item, m, k) == 1\n    result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result\n    num_mistakes = count(result.values(), 1)  # @inspect num_mistakes\n    false_positive_rate = num_mistakes / (len(items) + num_mistakes)  # @inspect false_positive_rate\n    text(\"Reduced the false positive rate!\")\n\n    false_positive_rate_analysis()\n\n\ndef false_positive_rate_analysis():\n    text(\"Assume independence of hash functions and items \"), article_link(\"https://en.wikipedia.org/wiki/Bloom_filter\")\n    m = 1000   # Number of bins\n    k = 10     # Number of hash functions\n    n = 100    # Number of items we're inserting\n\n    text(\"Consider a test input (not in the set) that would hash into a given test bin (say, i).\")\n    text(\"Now consider putting items into the Bloom filter and seeing if it hits i.\")\n\n    # Insert one item, ask if the test bin B(i) = 1?\n    # B: [0 0 1 0 0 0 0 0 0 0] - have to miss 1 time\n    f = 1 / m                              # P[B(i) = 1 after 1 insertion with 1 hash function]  # @inspect f\n    # B: [0 0 1 0 0 1 0 1 0 0] - have to miss k times\n    f = 1 - (1 - 1 / m) ** k               # P[B(i) = 1 after 1 insertion with k hash functions]  # @inspect f\n\n    # Insert n items, ask if the test bin B(i) = 1?\n    # Have to miss k*n times\n    f = 1 - (1 - 1 / m) ** (k * n)         # P[B(i) = 1 after n insertions for 1 hash function]  # @inspect f\n    # Get k chances to miss (since test input is hashed k times too)\n    f = f ** k                             # P[B(i) = 1 after n insertions for k hash functions]  # @inspect f\n\n    text(\"Optimal value of k (given fixed m / n ratio) [results in f ~ 0.5]\")\n    k = math.log(2) * m / n  # @inspect k\n    text(\"Resulting false positive rate (improved)\")\n    f = 0.5 ** k  # @inspect f\n\n    text(\"Tradeoff between compute (k), memory (m), and false positive rate (f) \"), named_link(\"lecture notes\", \"https://people.eecs.berkeley.edu/~daw/teaching/cs170-s03/Notes/lecture10.pdf\")\n\n    text(\"Example: Dolma\")\n    text(\"- Set false positive rate to 1e-15\")\n    text(\"- Perform on items = paragraphs\")\n\n\ndef build_table(items: list[str], num_bins: int):\n    \"\"\"Build a Bloom filter table of size `num_bins`, inserting `items` into it.\"\"\"\n    table = bitarray(num_bins)  # @inspect table\n    for item in items:\n        h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h\n        table[h] = 1  # @inspect table\n    return table\n\n\ndef build_table_k(items: list[str], num_bins: int, k: int):\n    \"\"\"Build a Bloom filter table of size `num_bins`, inserting `items` into it.\n    Use `k` hash functions.\"\"\"\n    table = bitarray(num_bins)  # @inspect table\n    for item in items:\n        # For each of the k functions\n        for seed in range(k):\n            h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed\n            table[h] = 1  # @inspect table\n    return table\n\n\ndef query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):\n    \"\"\"Return whether `item` is in the `table`.\"\"\"\n    h = mmh3.hash(item, seed) % num_bins\n    return table[h]\n\n\ndef query_table_k(table: bitarray, item: str, num_bins: int, k: int):\n    \"\"\"Return 1 if table set to 1 for all `k` hash functions.\"\"\"\n    return int(all(\n        query_table(table, item, num_bins, seed)\n        for seed in range(k)\n    ))\n\n\ndef jaccard_minhash():\n    text(\"Let's now look at approximate set membership.\")\n    text(\"First we need a similarity measure.\")\n\n    text(\"### Jaccard similarity\")\n    text(\"Definition: Jaccard(A, B) = |A intersect B| / |A union B|\")\n    A = {\"1\", \"2\", \"3\", \"4\"}\n    B = {\"1\", \"2\", \"3\", \"5\"}\n\n    def compute_jaccard(A, B):\n        intersection = len(A & B)  # @inspect intersection\n        union = len(A | B)  # @inspect union\n        return intersection / union\n    jaccard = compute_jaccard(A, B)  # @inspect jaccard\n\n    text(\"Definition: two documents are **near duplicates** if their Jaccard similarity >= threshold\")\n\n    text(\"Algorithmic challenge: find near duplicates in linear time\")\n\n    text(\"### MinHash\")\n    text(\"MinHash: a random hash function h so that Pr[h(A) = h(B)] = Jaccard(A, B)\")\n\n    text(\"Normally, you want different items to hash to different hashes\")\n    text(\"...but here, you want collision probability to depend on similarity\")\n\n    def minhash(S: set[str], seed: int):\n        return min(mmh3.hash(x, seed) for x in S)\n\n    text(\"Characteristic matrix representation:\")\n    text(\"item | A | B\", verbatim=True)\n    text(\"1    | 1 | 1\", verbatim=True)\n    text(\"2    | 1 | 1\", verbatim=True)\n    text(\"3    | 1 | 1\", verbatim=True)\n    text(\"4    | 1 | 0\", verbatim=True)\n    text(\"5    | 0 | 1\", verbatim=True)\n\n    text(\"Random hash function induces a permutation over items\")\n    text(\"Look at which item is first in A and which item is first in B.\")\n    text(\"Each item has the same probability as being first (min)\")\n    text(\"- If 1, 2, 3 is first, then first in A = first in B.\")\n    text(\"- If 4, 5 is first, then first in A \u2260 first in B.\")\n\n    # Verify MinHash approximates Jaccard as advertised\n    n = 100  # Generate this many random hash functions\n    matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]\n    estimated_jaccard = count(matches, True) / len(matches)  # @inspect estimated_jaccard\n    assert abs(estimated_jaccard - jaccard) < 0.01\n\n    text(\"Now we can hash our items, but a collision doesn't tell us Jaccard(A, B) > threshold.\")\n\n\ndef locality_sensitive_hashing():\n    text(\"Locality sensitive hashing (LSH) \"), named_link(\"book chapter\", \"http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf\")\n\n    text(\"Suppose we hash examples just one MinHash function\")\n    text(\"P[A and B collide] = Jaccard(A, B)\")\n    text(\"On average, more similar items will collide, but very stochastic...\")\n\n    text(\"Goal: have A and B collide if Jaccard(A, B) > threshold\")\n    text(\"We have to somehow sharpen the probabilities...\")\n\n    text(\"Solution: use n hash functions\")\n    text(\"Break up into b bands of r hash functions each (n = b * r)\")\n\n    n = 12      # Number of hash functions\n    b = 3       # Number of bands\n    r = 4       # Number of hash functions per band\n    text(\"Hash functions:\")\n    text(\"h1 h2 h3 h4  |  h5 h6 h7 h8  |  h9 h10 h11 h12\", verbatim=True)\n\n    text(\"Key: A and B collide if for *some* band, *all* its hash functions return same value\")\n    text(\"As we will see, the and-or structure of the bands sharpens the threshold\")\n\n    text(\"Given Jaccard(A, B), what is the probability that A and B collide?\")\n\n    def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r\n        prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match\n        prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision\n        return prob_collision\n\n    text(\"**Example**\")\n    prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision\n    image(\"https://cdn.sanity.io/images/vr8gru94/production/b470799575b8e77911bacb8500977afef06d6c85-1280x720.png\", width=600)\n\n\n    sims = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.98]\n    probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs\n\n    text(\"Increasing r sharpens the threshold and moves the curve to the right (harder to match)\")\n    probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs\n\n    text(\"Increasing b moves the curve to the left (easier to match)\")\n    probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs\n    image(\"https://cdn.sanity.io/images/vr8gru94/production/aace49fa240778e8ecf6e85ad08a2de7f5385566-1280x720.png\", width=600)\n\n    text(\"Example setting \"), link(\"https://arxiv.org/pdf/2107.06499\"), text(\": n = 9000, b = 20, r = 450\")\n    b = 20\n    r = 450\n    text(\"What is the threshold (where the phase transition happens)?\")\n    threshold = (1 / b) ** (1 / r)  # @inspect threshold\n    text(\"Probability that a fixed band matches:\")\n    prob_match = (1 / b)  # @inspect prob_match\n    text(\"Probability that A and B collide (\u2248 1-1/e):\")\n    prob_collision = 1 - (1 - 1 / b) ** b  #  @inspect prob_collision\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "steps": [
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 18,
          "function_name": "main",
          "code": "def main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 19,
          "function_name": "main",
          "code": "text(\"Last lecture: overview of datasets used for training language models\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Last lecture: overview of datasets used for training language models",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 20,
          "function_name": "main",
          "code": "text(\"- Live service (GitHub) \u2192 dump/crawl (GH Archive) \u2192 processed data (The Stack)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Live service (GitHub) \u2192 dump/crawl (GH Archive) \u2192 processed data (The Stack)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 21,
          "function_name": "main",
          "code": "text(\"- Processing: HTML to text, language/quality/toxicity filtering, deduplication\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Processing: HTML to text, language/quality/toxicity filtering, deduplication",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 23,
          "function_name": "main",
          "code": "text(\"This lecture: deep dive into the mechanics\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "This lecture: deep dive into the mechanics",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 24,
          "function_name": "main",
          "code": "text(\"- Algorithms for filtering (e.g., classifiers)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Algorithms for filtering (e.g., classifiers)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 25,
          "function_name": "main",
          "code": "text(\"- Applications of filtering (e.g., language, quality, toxicity)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Applications of filtering (e.g., language, quality, toxicity)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 26,
          "function_name": "main",
          "code": "text(\"- Deduplication (e.g., Bloom filters, MinHash, LSH)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Deduplication (e.g., Bloom filters, MinHash, LSH)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 39,
          "function_name": "filtering_algorithms",
          "code": "def filtering_algorithms():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 40,
          "function_name": "filtering_algorithms",
          "code": "text(\"Algorithmic building block:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Algorithmic building block:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 41,
          "function_name": "filtering_algorithms",
          "code": "text(\"- Given some **target data** T and lots of **raw data** R, find subset T' of R similar to T.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Given some **target data** T and lots of **raw data** R, find subset T' of R similar to T.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 42,
          "function_name": "filtering_algorithms",
          "code": "image(\"images/raw-target-schema.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/raw-target-schema.png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 44,
          "function_name": "filtering_algorithms",
          "code": "text(\"Desiderata for filtering algorithm:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Desiderata for filtering algorithm:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 45,
          "function_name": "filtering_algorithms",
          "code": "text(\"- Generalize from the target data (want T and T' to be different)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Generalize from the target data (want T and T' to be different)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 46,
          "function_name": "filtering_algorithms",
          "code": "text(\"- Extremely fast (have to run it on R, which is huge)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Extremely fast (have to run it on R, which is huge)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 56,
          "function_name": "kenlm_main",
          "code": "def kenlm_main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 57,
          "function_name": "kenlm_main",
          "code": "text(\"**n-gram model with Kneser-Ney smoothing** \"), article_link(\"https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**n-gram model with Kneser-Ney smoothing** ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 58,
          "function_name": "kenlm_main",
          "code": "text(\"- KenLM: fast implementation originally for machine translation \"), named_link(\"code\", \"https://kheafield.com/code/kenlm/\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- KenLM: fast implementation originally for machine translation ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [code]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://kheafield.com/code/kenlm/",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 59,
          "function_name": "kenlm_main",
          "code": "text(\"- Common language model used for data filtering\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Common language model used for data filtering",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 60,
          "function_name": "kenlm_main",
          "code": "text(\"- Extremely simple / fast - just count and normalize\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Extremely simple / fast - just count and normalize",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 62,
          "function_name": "kenlm_main",
          "code": "text(\"### Concepts\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Concepts",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 63,
          "function_name": "kenlm_main",
          "code": "text(\"Maximum likelihood estimation of n-gram language model:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Maximum likelihood estimation of n-gram language model:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 64,
          "function_name": "kenlm_main",
          "code": "text(\"- n = 3: p(in | the cat) = count(the cat in) / count(the cat)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- n = 3: p(in | the cat) = count(the cat in) / count(the cat)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 65,
          "function_name": "kenlm_main",
          "code": "text(\"Problem: sparse counts (count of many n-grams is 0 for large n)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: sparse counts (count of many n-grams is 0 for large n)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 66,
          "function_name": "kenlm_main",
          "code": "text(\"Solution: Use Kneser-Ney smoothing to handle unseen n-grams \"), article_link(\"https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: Use Kneser-Ney smoothing to handle unseen n-grams ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Kneser%E2%80%93Ney_smoothing",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 67,
          "function_name": "kenlm_main",
          "code": "text(\"- p(in | the cat) depends on p(in | cat) too\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- p(in | the cat) depends on p(in | cat) too",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 70,
          "function_name": "kenlm_main",
          "code": "model_url = \"https://huggingface.co/edugp/kenlm/resolve/main/wikipedia/en.arpa.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 71,
          "function_name": "kenlm_main",
          "code": "model_path = \"var/en.arpa.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 72,
          "function_name": "kenlm_main",
          "code": "download_file(model_url, model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 73,
          "function_name": "kenlm_main",
          "code": "model = kenlm.Model(model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 76,
          "function_name": "kenlm_main",
          "code": "def compute(content: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 76,
          "function_name": "compute",
          "code": "def compute(content: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 78,
          "function_name": "compute",
          "code": "content = \"<s> \" + content.replace(\",\", \" ,\").replace(\".\", \" .\") + \" </s>\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 81,
          "function_name": "compute",
          "code": "score = model.score(content)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 84,
          "function_name": "compute",
          "code": "num_tokens = len(list(model.full_scores(content)))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 85,
          "function_name": "compute",
          "code": "perplexity = math.exp(-score / num_tokens)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 87,
          "function_name": "compute",
          "code": "return score, perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 89,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"Stanford University was founded in 1885 by Leland and Jane Stanford as a tribute to the memory of their only child, Leland Stanford Jr.\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {
        "score": -151.73199462890625,
        "perplexity": 187.19254617777722
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 76,
          "function_name": "compute",
          "code": "def compute(content: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 78,
          "function_name": "compute",
          "code": "content = \"<s> \" + content.replace(\",\", \" ,\").replace(\".\", \" .\") + \" </s>\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 81,
          "function_name": "compute",
          "code": "score = model.score(content)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 84,
          "function_name": "compute",
          "code": "num_tokens = len(list(model.full_scores(content)))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 85,
          "function_name": "compute",
          "code": "perplexity = math.exp(-score / num_tokens)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 87,
          "function_name": "compute",
          "code": "return score, perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 90,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"If you believe that the course staff made an objective error in grading, you may submit a regrade request on Gradescope within 3 days after the grades are released.\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {
        "score": -180.81784057617188,
        "perplexity": 204.01056498637752
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 76,
          "function_name": "compute",
          "code": "def compute(content: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 78,
          "function_name": "compute",
          "code": "content = \"<s> \" + content.replace(\",\", \" ,\").replace(\".\", \" .\") + \" </s>\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 81,
          "function_name": "compute",
          "code": "score = model.score(content)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 84,
          "function_name": "compute",
          "code": "num_tokens = len(list(model.full_scores(content)))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 85,
          "function_name": "compute",
          "code": "perplexity = math.exp(-score / num_tokens)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 87,
          "function_name": "compute",
          "code": "return score, perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 91,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"asdf asdf asdf asdf asdf\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {
        "score": -44.84880447387695,
        "perplexity": 272.08120219784354
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 76,
          "function_name": "compute",
          "code": "def compute(content: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 78,
          "function_name": "compute",
          "code": "content = \"<s> \" + content.replace(\",\", \" ,\").replace(\".\", \" .\") + \" </s>\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 81,
          "function_name": "compute",
          "code": "score = model.score(content)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 84,
          "function_name": "compute",
          "code": "num_tokens = len(list(model.full_scores(content)))"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 85,
          "function_name": "compute",
          "code": "perplexity = math.exp(-score / num_tokens)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        },
        {
          "path": "lecture_14.py",
          "line_number": 87,
          "function_name": "compute",
          "code": "return score, perplexity"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 92,
          "function_name": "kenlm_main",
          "code": "score, perplexity = compute(\"the the the the the the the the the the the the the the the the\")  # @inspect score, @inspect perplexity"
        }
      ],
      "env": {
        "score": -78.60276794433594,
        "perplexity": 62.61393057799338
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 94,
          "function_name": "kenlm_main",
          "code": "text(\"### CCNet\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### CCNet",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 95,
          "function_name": "kenlm_main",
          "code": "link(\"https://arxiv.org/pdf/1911.00359\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "CCNet: Extracting High Quality Monolingual Datasets from Web Crawl Data",
            "authors": [
              "Guillaume Wenzek",
              "Marie-Anne Lachaux",
              "Alexis Conneau",
              "Vishrav Chaudhary",
              "Francisco Guzm\u00e1n",
              "Armand Joulin",
              "Edouard Grave"
            ],
            "organization": null,
            "date": "2019-11-01T13:09:28Z",
            "url": "https://arxiv.org/pdf/1911.00359",
            "description": "Pre-training text representations have led to significant improvements in many areas of natural language processing. The quality of these models benefits greatly from the size of the pretraining corpora as long as its quality is preserved. In this paper, we describe an automatic pipeline to extract massive high-quality monolingual datasets from Common Crawl for a variety of languages. Our pipeline follows the data processing introduced in fastText (Mikolov et al., 2017; Grave et al., 2018), that deduplicates documents and identifies their language. We augment this pipeline with a filtering step to select documents that are close to high quality corpora like Wikipedia.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 96,
          "function_name": "kenlm_main",
          "code": "text(\"- Items are paragraphs of text\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Items are paragraphs of text",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 97,
          "function_name": "kenlm_main",
          "code": "text(\"- Sort paragraphs by increasing perplexity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Sort paragraphs by increasing perplexity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 98,
          "function_name": "kenlm_main",
          "code": "text(\"- Keep the top 1/3\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Keep the top 1/3",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 99,
          "function_name": "kenlm_main",
          "code": "text(\"- Was used in LLaMA\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Was used in LLaMA",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        },
        {
          "path": "lecture_14.py",
          "line_number": 101,
          "function_name": "kenlm_main",
          "code": "text(\"Summary: Kneser-Ney n-gram language models (with KenLM implementation) is fast but crude\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Summary: Kneser-Ney n-gram language models (with KenLM implementation) is fast but crude",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 48,
          "function_name": "filtering_algorithms",
          "code": "kenlm_main()         # Train n-gram model"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 104,
          "function_name": "fasttext_main",
          "code": "def fasttext_main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 105,
          "function_name": "fasttext_main",
          "code": "text(\"fastText classifier \"), link(\"https://arxiv.org/pdf/1607.01759\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "fastText classifier ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Bag of Tricks for Efficient Text Classification",
            "authors": [
              "Armand Joulin",
              "Edouard Grave",
              "Piotr Bojanowski",
              "Tomas Mikolov"
            ],
            "organization": null,
            "date": "2016-07-06T19:40:15Z",
            "url": "https://arxiv.org/pdf/1607.01759",
            "description": "This paper explores a simple and efficient baseline for text classification. Our experiments show that our fast text classifier fastText is often on par with deep learning classifiers in terms of accuracy, and many orders of magnitude faster for training and evaluation. We can train fastText on more than one billion words in less than ten minutes using a standard multicore~CPU, and classify half a million sentences among~312K classes in less than a minute.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 106,
          "function_name": "fasttext_main",
          "code": "text(\"- Task: text classification (e.g., sentiment classification)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Task: text classification (e.g., sentiment classification)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 107,
          "function_name": "fasttext_main",
          "code": "text(\"- Goal was to train a fast classifier for text classification\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Goal was to train a fast classifier for text classification",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 108,
          "function_name": "fasttext_main",
          "code": "text(\"- They found it was as good as much slower neural network classifiers\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- They found it was as good as much slower neural network classifiers",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 110,
          "function_name": "fasttext_main",
          "code": "text(\"### Baseline: bag of words (not what they did)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Baseline: bag of words (not what they did)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 111,
          "function_name": "fasttext_main",
          "code": "L = 32                              # Length of input"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 112,
          "function_name": "fasttext_main",
          "code": "V = 8192                            # Vocabulary size"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 113,
          "function_name": "fasttext_main",
          "code": "K = 64                              # Number of classes"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 114,
          "function_name": "fasttext_main",
          "code": "W = nn.Embedding(V, K)              # Embedding parameters (V x K)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 115,
          "function_name": "fasttext_main",
          "code": "x = torch.randint(V, (L,))          # Input tokens (L) - e.g., [\"the\", \"cat\", \"in\", \"the\", \"hat\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 116,
          "function_name": "fasttext_main",
          "code": "y = softmax(W(x).mean(dim=0))       # Output probabilities (K)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 117,
          "function_name": "fasttext_main",
          "code": "text(\"Problem: V*K parameters (could be huge)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: V*K parameters (could be huge)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 119,
          "function_name": "fasttext_main",
          "code": "text(\"### fastText classifier: bag of word embeddings\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### fastText classifier: bag of word embeddings",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 120,
          "function_name": "fasttext_main",
          "code": "H = 16                              # Hidden dimension"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 121,
          "function_name": "fasttext_main",
          "code": "W = nn.Embedding(V, H)              # Embedding parameters (V x H)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 122,
          "function_name": "fasttext_main",
          "code": "U = nn.Linear(H, K)                 # Head parameters (H x K)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 123,
          "function_name": "fasttext_main",
          "code": "y = softmax(U(W(x).mean(dim=0)))    # Output probabilities (K)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 124,
          "function_name": "fasttext_main",
          "code": "text(\"Only H*(V + K) parameters\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Only H*(V + K) parameters",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 126,
          "function_name": "fasttext_main",
          "code": "text(\"Implementation:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Implementation:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 127,
          "function_name": "fasttext_main",
          "code": "text(\"- Parallelized, asynchronous SGD\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Parallelized, asynchronous SGD",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 128,
          "function_name": "fasttext_main",
          "code": "text(\"- Learning rate: linear interpolation from [some number] to 0 \"), article_link(\"https://github.com/facebookresearch/fastText/blob/main/src/fasttext.cc#L653\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Learning rate: linear interpolation from [some number] to 0 ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://github.com/facebookresearch/fastText/blob/main/src/fasttext.cc#L653",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 130,
          "function_name": "fasttext_main",
          "code": "text(\"### Bag of n-grams\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Bag of n-grams",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 131,
          "function_name": "fasttext_main",
          "code": "x = [\"the cat\", \"cat in\", \"in the\", \"the hat\"]  # @inspect x"
        }
      ],
      "env": {
        "x": [
          "the cat",
          "cat in",
          "in the",
          "the hat"
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 132,
          "function_name": "fasttext_main",
          "code": "text(\"Problem: number of bigrams can get large (and also be unbounded)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: number of bigrams can get large (and also be unbounded)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 133,
          "function_name": "fasttext_main",
          "code": "text(\"Solution: hashing trick\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: hashing trick",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 134,
          "function_name": "fasttext_main",
          "code": "num_bins = 8  # In practice, 10M bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 135,
          "function_name": "fasttext_main",
          "code": "hashed_x = [hash(bigram) % num_bins for bigram in x]  # @inspect hashed_x"
        }
      ],
      "env": {
        "hashed_x": [
          2,
          1,
          6,
          4
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 137,
          "function_name": "fasttext_main",
          "code": "text(\"- For quality filtering, we have K = 2 classes (good versus bad)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- For quality filtering, we have K = 2 classes (good versus bad)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 138,
          "function_name": "fasttext_main",
          "code": "text(\"- In that case, fastText is just a linear classifier (H = K = 2)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- In that case, fastText is just a linear classifier (H = K = 2)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        },
        {
          "path": "lecture_14.py",
          "line_number": 140,
          "function_name": "fasttext_main",
          "code": "text(\"In general, can use any classifier (e.g., BERT, Llama), it's just slower\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "In general, can use any classifier (e.g., BERT, Llama), it's just slower",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 49,
          "function_name": "filtering_algorithms",
          "code": "fasttext_main()      # Train a classifier"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 143,
          "function_name": "dsir_main",
          "code": "def dsir_main():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 144,
          "function_name": "dsir_main",
          "code": "text(\"Data Selection for Language Models via Importance Resampling (DSIR) \"), link(\"https://arxiv.org/abs/2302.03169\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Data Selection for Language Models via Importance Resampling (DSIR) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Data Selection for Language Models via Importance Resampling",
            "authors": [
              "Sang Michael Xie",
              "Shibani Santurkar",
              "Tengyu Ma",
              "Percy Liang"
            ],
            "organization": null,
            "date": "2023-02-06T23:57:56Z",
            "url": "https://arxiv.org/abs/2302.03169",
            "description": "Selecting a suitable pretraining dataset is crucial for both general-domain (e.g., GPT-3) and domain-specific (e.g., Codex) language models (LMs). We formalize this problem as selecting a subset of a large raw unlabeled dataset to match a desired target distribution given unlabeled target samples. Due to the scale and dimensionality of the raw text data, existing methods use simple heuristics or require human experts to manually curate data. Instead, we extend the classic importance resampling approach used in low-dimensions for LM data selection. We propose Data Selection with Importance Resampling (DSIR), an efficient and scalable framework that estimates importance weights in a reduced feature space for tractability and selects data with importance resampling according to these weights. We instantiate the DSIR framework with hashed n-gram features for efficiency, enabling the selection of 100M documents from the full Pile dataset in 4.5 hours. To measure whether hashed n-gram features preserve the aspects of the data that are relevant to the target, we define KL reduction, a data metric that measures the proximity between the selected pretraining data and the target on some feature space. Across 8 data selection methods (including expert selection), KL reduction on hashed n-gram features highly correlates with average downstream accuracy (r=0.82). When selecting data for continued pretraining on a specific domain, DSIR performs comparably to expert curation across 8 target distributions. When pretraining general-domain models (target is Wikipedia and books), DSIR improves over random selection and heuristic filtering baselines by 2-2.5% on the GLUE benchmark. Code is available at https://github.com/p-lambda/dsir.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 145,
          "function_name": "dsir_main",
          "code": "image(\"https://www.jinghong-chen.net/content/images/size/w1200/2023/12/Screenshot-2023-12-24-at-17.41.38.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-86d4bcf6b266e36f34e3a8f883b54d48-https_www_jinghong-chen_net_content_images_size_w1200_2023_12_Screenshot-2023-12-24-at-17_41_38_png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 185,
          "function_name": "importance_sampling",
          "code": "def importance_sampling():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 186,
          "function_name": "importance_sampling",
          "code": "text(\"Setup:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Setup:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 187,
          "function_name": "importance_sampling",
          "code": "text(\"- Target distribution p (want samples from here)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Target distribution p (want samples from here)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 188,
          "function_name": "importance_sampling",
          "code": "text(\"- Proposal distribution q (have samples from here)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Proposal distribution q (have samples from here)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 190,
          "function_name": "importance_sampling",
          "code": "vocabulary = [0, 1, 2, 3]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 191,
          "function_name": "importance_sampling",
          "code": "p = [0.1, 0.2, 0.3, 0.4]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 192,
          "function_name": "importance_sampling",
          "code": "q = [0.4, 0.3, 0.2, 0.1]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 195,
          "function_name": "importance_sampling",
          "code": "n = 100"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 196,
          "function_name": "importance_sampling",
          "code": "samples = np.random.choice(vocabulary, p=q, size = n)  # @inspect samples"
        }
      ],
      "env": {
        "samples": "[0 2 0 2 1 1 0 1 0 1 0 0 0 0 1 1 0 3 1 1 1 1 1 1 3 1 0 2 0 1 3 0 2 1 1 2 0\n 0 0 3 2 1 1 0 1 1 0 3 2 0 2 0 1 0 1 2 2 2 0 0 0 0 2 1 0 2 0 1 3 0 0 0 0 0\n 0 0 1 1 2 2 2 1 0 1 1 0 1 0 1 0 1 1 3 3 0 1 0 0 2 0]"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 197,
          "function_name": "importance_sampling",
          "code": "text(f\"Samples (q): {samples}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Samples (q): [0 2 0 2 1 1 0 1 0 1 0 0 0 0 1 1 0 3 1 1 1 1 1 1 3 1 0 2 0 1 3 0 2 1 1 2 0\n 0 0 3 2 1 1 0 1 1 0 3 2 0 2 0 1 0 1 2 2 2 0 0 0 0 2 1 0 2 0 1 3 0 0 0 0 0\n 0 0 1 1 2 2 2 1 0 1 1 0 1 0 1 0 1 1 3 3 0 1 0 0 2 0]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 200,
          "function_name": "importance_sampling",
          "code": "w = [p[x] / q[x] for x in samples]  # @inspect w"
        }
      ],
      "env": {
        "w": [
          0.25,
          1.4999999999999998,
          0.25,
          1.4999999999999998,
          0.6666666666666667,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.25,
          0.25,
          0.25,
          0.25,
          0.6666666666666667,
          0.6666666666666667,
          0.25,
          4.0,
          0.6666666666666667,
          0.6666666666666667,
          0.6666666666666667,
          0.6666666666666667,
          0.6666666666666667,
          0.6666666666666667,
          4.0,
          0.6666666666666667,
          0.25,
          1.4999999999999998,
          0.25,
          0.6666666666666667,
          4.0,
          0.25,
          1.4999999999999998,
          0.6666666666666667,
          0.6666666666666667,
          1.4999999999999998,
          0.25,
          0.25,
          0.25,
          4.0,
          1.4999999999999998,
          0.6666666666666667,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.6666666666666667,
          0.25,
          4.0,
          1.4999999999999998,
          0.25,
          1.4999999999999998,
          0.25,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          1.4999999999999998,
          1.4999999999999998,
          1.4999999999999998,
          0.25,
          0.25,
          0.25,
          0.25,
          1.4999999999999998,
          0.6666666666666667,
          0.25,
          1.4999999999999998,
          0.25,
          0.6666666666666667,
          4.0,
          0.25,
          0.25,
          0.25,
          0.25,
          0.25,
          0.25,
          0.25,
          0.6666666666666667,
          0.6666666666666667,
          1.4999999999999998,
          1.4999999999999998,
          1.4999999999999998,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.25,
          0.6666666666666667,
          0.6666666666666667,
          4.0,
          4.0,
          0.25,
          0.6666666666666667,
          0.25,
          0.25,
          1.4999999999999998,
          0.25
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 201,
          "function_name": "importance_sampling",
          "code": "z = sum(w)  # @inspect z"
        }
      ],
      "env": {
        "z": 90.41666666666667
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 202,
          "function_name": "importance_sampling",
          "code": "w = [w_i / z for w_i in w]  # @inspect w"
        }
      ],
      "env": {
        "w": [
          0.0027649769585253456,
          0.016589861751152072,
          0.0027649769585253456,
          0.016589861751152072,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0027649769585253456,
          0.04423963133640553,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0073732718894009225,
          0.04423963133640553,
          0.0073732718894009225,
          0.0027649769585253456,
          0.016589861751152072,
          0.0027649769585253456,
          0.0073732718894009225,
          0.04423963133640553,
          0.0027649769585253456,
          0.016589861751152072,
          0.0073732718894009225,
          0.0073732718894009225,
          0.016589861751152072,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.04423963133640553,
          0.016589861751152072,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0027649769585253456,
          0.04423963133640553,
          0.016589861751152072,
          0.0027649769585253456,
          0.016589861751152072,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.016589861751152072,
          0.016589861751152072,
          0.016589861751152072,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.016589861751152072,
          0.0073732718894009225,
          0.0027649769585253456,
          0.016589861751152072,
          0.0027649769585253456,
          0.0073732718894009225,
          0.04423963133640553,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0073732718894009225,
          0.016589861751152072,
          0.016589861751152072,
          0.016589861751152072,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0073732718894009225,
          0.04423963133640553,
          0.04423963133640553,
          0.0027649769585253456,
          0.0073732718894009225,
          0.0027649769585253456,
          0.0027649769585253456,
          0.016589861751152072,
          0.0027649769585253456
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 205,
          "function_name": "importance_sampling",
          "code": "samples = np.random.choice(samples, p=w, size=n)  # @inspect samples"
        }
      ],
      "env": {
        "samples": "[2 2 1 3 3 2 0 3 3 2 1 0 3 2 0 3 3 1 3 1 3 2 3 2 3 2 3 1 0 3 2 2 2 0 2 1 2\n 0 3 1 1 1 3 1 3 3 3 1 0 2 3 1 2 1 2 2 2 2 1 1 0 2 1 1 0 2 3 2 1 3 2 3 1 2\n 3 2 3 2 1 1 3 3 3 1 1 3 2 1 3 1 3 1 0 3 1 1 2 3 2 1]"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 206,
          "function_name": "importance_sampling",
          "code": "text(f\"Resampled (p): {samples}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Resampled (p): [2 2 1 3 3 2 0 3 3 2 1 0 3 2 0 3 3 1 3 1 3 2 3 2 3 2 3 1 0 3 2 2 2 0 2 1 2\n 0 3 1 1 1 3 1 3 3 3 1 0 2 3 1 2 1 2 2 2 2 1 1 0 2 1 1 0 2 3 2 1 3 2 3 1 2\n 3 2 3 2 1 1 3 3 3 1 1 3 2 1 3 1 3 1 0 3 1 1 2 3 2 1]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 147,
          "function_name": "dsir_main",
          "code": "importance_sampling()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 149,
          "function_name": "dsir_main",
          "code": "text(\"Setup:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Setup:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 150,
          "function_name": "dsir_main",
          "code": "text(\"- Target dataset D_p (small)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Target dataset D_p (small)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 151,
          "function_name": "dsir_main",
          "code": "text(\"- Proposal (raw) dataset D_q (large)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Proposal (raw) dataset D_q (large)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 153,
          "function_name": "dsir_main",
          "code": "text(\"Take 1:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Take 1:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 154,
          "function_name": "dsir_main",
          "code": "text(\"- Fit target distribution p to D_p\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Fit target distribution p to D_p",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 155,
          "function_name": "dsir_main",
          "code": "text(\"- Fit proposal distribution q to D_q\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Fit proposal distribution q to D_q",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 156,
          "function_name": "dsir_main",
          "code": "text(\"- Do importance resampling with p, q, and raw samples D_q\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Do importance resampling with p, q, and raw samples D_q",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 157,
          "function_name": "dsir_main",
          "code": "text(\"Problem: target data D_p is too small to estimate a good model\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: target data D_p is too small to estimate a good model",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 159,
          "function_name": "dsir_main",
          "code": "text(\"Take 2: use hashed n-grams\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Take 2: use hashed n-grams",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 160,
          "function_name": "dsir_main",
          "code": "training_text = \"the cat in the hat\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 163,
          "function_name": "dsir_main",
          "code": "num_bins = 4"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 164,
          "function_name": "dsir_main",
          "code": "def get_hashed_ngrams(text: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 168,
          "function_name": "dsir_main",
          "code": "training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 168,
          "function_name": "dsir_main",
          "code": "training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 164,
          "function_name": "get_hashed_ngrams",
          "code": "def get_hashed_ngrams(text: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 168,
          "function_name": "dsir_main",
          "code": "training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 165,
          "function_name": "get_hashed_ngrams",
          "code": "ngrams = text.split(\" \")  # Unigram for now"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 168,
          "function_name": "dsir_main",
          "code": "training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 166,
          "function_name": "get_hashed_ngrams",
          "code": "return [hash(ngram) % num_bins for ngram in ngrams]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 168,
          "function_name": "dsir_main",
          "code": "training_hashed_ngrams = get_hashed_ngrams(training_text)  # @inspect training_hashed_ngrams"
        }
      ],
      "env": {
        "training_hashed_ngrams": [
          3,
          1,
          1,
          3,
          3
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 171,
          "function_name": "dsir_main",
          "code": "probs = [count(training_hashed_ngrams, x) / len(training_hashed_ngrams) for x in range(num_bins)]  # @inspect probs"
        }
      ],
      "env": {
        "probs": [
          0.0,
          0.4,
          0.0,
          0.6
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 174,
          "function_name": "dsir_main",
          "code": "hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 174,
          "function_name": "dsir_main",
          "code": "hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 164,
          "function_name": "get_hashed_ngrams",
          "code": "def get_hashed_ngrams(text: str):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 174,
          "function_name": "dsir_main",
          "code": "hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 165,
          "function_name": "get_hashed_ngrams",
          "code": "ngrams = text.split(\" \")  # Unigram for now"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 174,
          "function_name": "dsir_main",
          "code": "hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams"
        },
        {
          "path": "lecture_14.py",
          "line_number": 166,
          "function_name": "get_hashed_ngrams",
          "code": "return [hash(ngram) % num_bins for ngram in ngrams]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 174,
          "function_name": "dsir_main",
          "code": "hashed_ngrams = get_hashed_ngrams(\"the text\")  # @inspect hashed_ngrams"
        }
      ],
      "env": {
        "hashed_ngrams": [
          3,
          0
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 175,
          "function_name": "dsir_main",
          "code": "prob = np.prod([probs[x] for x in hashed_ngrams])  # @inspect prob"
        }
      ],
      "env": {
        "prob": 0.0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 176,
          "function_name": "dsir_main",
          "code": "text(\"Result: DSIR slightly better than heuristic classification (fastText) on the [GLUE](https://gluebenchmark.com/) benchmark\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Result: DSIR slightly better than heuristic classification (fastText) on the [GLUE](https://gluebenchmark.com/) benchmark",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 177,
          "function_name": "dsir_main",
          "code": "image(\"images/dsir-results.png\", width=700)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "images/dsir-results.png",
          "style": {
            "width": 700
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 179,
          "function_name": "dsir_main",
          "code": "text(\"Comparison with fastText:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Comparison with fastText:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 180,
          "function_name": "dsir_main",
          "code": "text(\"- Modeling distributions is a more principled approach capturing diversity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Modeling distributions is a more principled approach capturing diversity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 181,
          "function_name": "dsir_main",
          "code": "text(\"- Similar computation complexity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Similar computation complexity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        },
        {
          "path": "lecture_14.py",
          "line_number": 182,
          "function_name": "dsir_main",
          "code": "text(\"- Both can be improved by better modeling\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Both can be improved by better modeling",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 50,
          "function_name": "filtering_algorithms",
          "code": "dsir_main()          # Train bag of n-grams model, do importance resampling"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 209,
          "function_name": "filtering_summary",
          "code": "def filtering_summary():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 210,
          "function_name": "filtering_summary",
          "code": "text(\"Implementations: KenLM, fastText, DSIR\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Implementations: KenLM, fastText, DSIR",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 212,
          "function_name": "filtering_summary",
          "code": "text(\"### General framework\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### General framework",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 213,
          "function_name": "filtering_summary",
          "code": "text(\"Given target T and raw R, find subset of R similar to T\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given target T and raw R, find subset of R similar to T",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 214,
          "function_name": "filtering_summary",
          "code": "text(\"1. Estimate some model based on R and T and derive a scoring function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Estimate some model based on R and T and derive a scoring function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 215,
          "function_name": "filtering_summary",
          "code": "text(\"2. Keep examples in R based on their score\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Keep examples in R based on their score",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 217,
          "function_name": "filtering_summary",
          "code": "text(\"### Instantiations of the framework\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Instantiations of the framework",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 219,
          "function_name": "filtering_summary",
          "code": "text(\"Generative model of T (KenLM):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Generative model of T (KenLM):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 220,
          "function_name": "filtering_summary",
          "code": "text(\"1. score(x) = p_T(x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. score(x) = p_T(x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 221,
          "function_name": "filtering_summary",
          "code": "text(\"2. Keep examples x with score(x) >= threshold (stochastically)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Keep examples x with score(x) >= threshold (stochastically)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 223,
          "function_name": "filtering_summary",
          "code": "text(\"Discriminative classifier (fastText):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Discriminative classifier (fastText):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 224,
          "function_name": "filtering_summary",
          "code": "text(\"1. score(x) = p(T | x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. score(x) = p(T | x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 225,
          "function_name": "filtering_summary",
          "code": "text(\"2. Keep examples x with score(x) >= threshold (stochastically)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Keep examples x with score(x) >= threshold (stochastically)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 227,
          "function_name": "filtering_summary",
          "code": "text(\"Importance resampling (DSIR):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Importance resampling (DSIR):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 228,
          "function_name": "filtering_summary",
          "code": "text(\"1. score(x) = p_T(x) / p_R(x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. score(x) = p_T(x) / p_R(x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 229,
          "function_name": "filtering_summary",
          "code": "text(\"2. Resample examples x with probability proportional to score(x)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. Resample examples x with probability proportional to score(x)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 51,
          "function_name": "filtering_algorithms",
          "code": "filtering_summary()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 53,
          "function_name": "filtering_algorithms",
          "code": "text(\"Survey paper on data selection \"), link(\"https://arxiv.org/abs/2402.16827\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Survey paper on data selection ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "A Survey on Data Selection for Language Models",
            "authors": [
              "Alon Albalak",
              "Yanai Elazar",
              "Sang Michael Xie",
              "Shayne Longpre",
              "Nathan Lambert",
              "Xinyi Wang",
              "Niklas Muennighoff",
              "Bairu Hou",
              "Liangming Pan",
              "Haewon Jeong",
              "Colin Raffel",
              "Shiyu Chang",
              "Tatsunori Hashimoto",
              "William Yang Wang"
            ],
            "organization": null,
            "date": "2024-02-26T18:54:35Z",
            "url": "https://arxiv.org/abs/2402.16827",
            "description": "A major factor in the recent success of large language models is the use of enormous and ever-growing text datasets for unsupervised pre-training. However, naively training a model on all available data may not be optimal (or feasible), as the quality of available text data can vary. Filtering out data can also decrease the carbon footprint and financial costs of training models by reducing the amount of training required. Data selection methods aim to determine which candidate data points to include in the training dataset and how to appropriately sample from the selected data points. The promise of improved data selection methods has caused the volume of research in the area to rapidly expand. However, because deep learning is mostly driven by empirical evidence and experimentation on large-scale data is expensive, few organizations have the resources for extensive data selection research. Consequently, knowledge of effective data selection practices has become concentrated within a few organizations, many of which do not openly share their findings and methodologies. To narrow this gap in knowledge, we present a comprehensive review of existing literature on data selection methods and related research areas, providing a taxonomy of existing approaches. By describing the current landscape of research, this work aims to accelerate progress in data selection by establishing an entry point for new and established researchers. Additionally, throughout this review we draw attention to noticeable holes in the literature and conclude the paper by proposing promising avenues for future research.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 28,
          "function_name": "main",
          "code": "filtering_algorithms()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 232,
          "function_name": "filtering_applications",
          "code": "def filtering_applications():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 233,
          "function_name": "filtering_applications",
          "code": "text(\"The same data filtering machinery can be used for different filtering tasks.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "The same data filtering machinery can be used for different filtering tasks.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 239,
          "function_name": "language_identification",
          "code": "def language_identification():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 240,
          "function_name": "language_identification",
          "code": "text(\"Language identification: find text of a specific language (e.g., English)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Language identification: find text of a specific language (e.g., English)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 242,
          "function_name": "language_identification",
          "code": "text(\"Why not just go multilingual?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Why not just go multilingual?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 243,
          "function_name": "language_identification",
          "code": "text(\"- Data: difficult to do curation / processing of high-quality data in any given language\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Data: difficult to do curation / processing of high-quality data in any given language",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 244,
          "function_name": "language_identification",
          "code": "text(\"- Compute: in computed-limited regime, less compute/tokens dedicated to any given language\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Compute: in computed-limited regime, less compute/tokens dedicated to any given language",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 245,
          "function_name": "language_identification",
          "code": "text(\"Models differ on multilinguality:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Models differ on multilinguality:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 246,
          "function_name": "language_identification",
          "code": "text(\"- English was only 30% of BLOOM (was undertrained), English performance suffered \"), link(\"https://arxiv.org/pdf/2303.03915\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- English was only 30% of BLOOM (was undertrained), English performance suffered ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "The BigScience ROOTS Corpus: A 1.6TB Composite Multilingual Dataset",
            "authors": [
              "Hugo Lauren\u00e7on",
              "Lucile Saulnier",
              "Thomas Wang",
              "Christopher Akiki",
              "Albert Villanova del Moral",
              "Teven Le Scao",
              "Leandro Von Werra",
              "Chenghao Mou",
              "Eduardo Gonz\u00e1lez Ponferrada",
              "Huu Nguyen",
              "J\u00f6rg Frohberg",
              "Mario \u0160a\u0161ko",
              "Quentin Lhoest",
              "Angelina McMillan-Major",
              "Gerard Dupont",
              "Stella Biderman",
              "Anna Rogers",
              "Loubna Ben allal",
              "Francesco De Toni",
              "Giada Pistilli",
              "Olivier Nguyen",
              "Somaieh Nikpoor",
              "Maraim Masoud",
              "Pierre Colombo",
              "Javier de la Rosa",
              "Paulo Villegas",
              "Tristan Thrush",
              "Shayne Longpre",
              "Sebastian Nagel",
              "Leon Weber",
              "Manuel Mu\u00f1oz",
              "Jian Zhu",
              "Daniel Van Strien",
              "Zaid Alyafeai",
              "Khalid Almubarak",
              "Minh Chien Vu",
              "Itziar Gonzalez-Dios",
              "Aitor Soroa",
              "Kyle Lo",
              "Manan Dey",
              "Pedro Ortiz Suarez",
              "Aaron Gokaslan",
              "Shamik Bose",
              "David Adelani",
              "Long Phan",
              "Hieu Tran",
              "Ian Yu",
              "Suhas Pai",
              "Jenny Chim",
              "Violette Lepercq",
              "Suzana Ilic",
              "Margaret Mitchell",
              "Sasha Alexandra Luccioni",
              "Yacine Jernite"
            ],
            "organization": null,
            "date": "2023-03-07T14:25:44Z",
            "url": "https://arxiv.org/pdf/2303.03915",
            "description": "As language models grow ever larger, the need for large-scale high-quality text datasets has never been more pressing, especially in multilingual settings. The BigScience workshop, a 1-year international and multidisciplinary initiative, was formed with the goal of researching and training large language models as a values-driven undertaking, putting issues of ethics, harm, and governance in the foreground. This paper documents the data creation and curation efforts undertaken by BigScience to assemble the Responsible Open-science Open-collaboration Text Sources (ROOTS) corpus, a 1.6TB dataset spanning 59 languages that was used to train the 176-billion-parameter BigScience Large Open-science Open-access Multilingual (BLOOM) language model. We further release a large initial subset of the corpus and analyses thereof, and hope to empower large-scale monolingual and multilingual modeling projects with both the data and the processing tools, as well as stimulate research around this large multilingual corpus.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 247,
          "function_name": "language_identification",
          "code": "text(\"- Most frontier models (GPT-4, Claude, Gemini, Llama, Qwen) are heavily multilingual (sufficiently trained)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Most frontier models (GPT-4, Claude, Gemini, Llama, Qwen) are heavily multilingual (sufficiently trained)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 249,
          "function_name": "language_identification",
          "code": "text(\"fastText language identification \"), article_link(\"https://fasttext.cc/docs/en/language-identification.html\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "fastText language identification ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://fasttext.cc/docs/en/language-identification.html",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 250,
          "function_name": "language_identification",
          "code": "text(\"- Off-the-shelf classifier\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Off-the-shelf classifier",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 251,
          "function_name": "language_identification",
          "code": "text(\"- Supports 176 languages\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Supports 176 languages",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 252,
          "function_name": "language_identification",
          "code": "text(\"- Trained on multilingual sites: Wikipedia, Tatoeba (translation site) and SETimes (Southeast European news)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Trained on multilingual sites: Wikipedia, Tatoeba (translation site) and SETimes (Southeast European news)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 254,
          "function_name": "language_identification",
          "code": "text(\"Example: Dolma keeps pages with p(English) >= 0.5 \"), link(dolma)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: Dolma keeps pages with p(English) >= 0.5 ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Dolma: an Open Corpus of Three Trillion Tokens for Language Model Pretraining Research",
            "authors": [
              "Luca Soldaini",
              "Rodney Kinney",
              "Akshita Bhagia",
              "Dustin Schwenk",
              "David Atkinson",
              "Russell Authur",
              "Ben Bogin",
              "Khyathi Chandu",
              "Jennifer Dumas",
              "Yanai Elazar",
              "Valentin Hofmann",
              "Ananya Harsh Jha",
              "Sachin Kumar",
              "Li Lucy",
              "Xinxi Lyu",
              "Nathan Lambert",
              "Ian Magnusson",
              "Jacob Morrison",
              "Niklas Muennighoff",
              "Aakanksha Naik",
              "Crystal Nam",
              "Matthew E. Peters",
              "Abhilasha Ravichander",
              "Kyle Richardson",
              "Zejiang Shen",
              "Emma Strubell",
              "Nishant Subramani",
              "Oyvind Tafjord",
              "Pete Walsh",
              "Luke Zettlemoyer",
              "Noah A. Smith",
              "Hannaneh Hajishirzi",
              "Iz Beltagy",
              "Dirk Groeneveld",
              "Jesse Dodge",
              "Kyle Lo"
            ],
            "organization": null,
            "date": "2024-01-31T20:29:50Z",
            "url": "https://arxiv.org/abs/2402.00159",
            "description": "Information about pretraining corpora used to train the current best-performing language models is seldom discussed: commercial models rarely detail their data, and even open models are often released without accompanying training data or recipes to reproduce them. As a result, it is challenging to conduct and advance scientific research on language modeling, such as understanding how training data impacts model capabilities and limitations. To facilitate scientific research on language model pretraining, we curate and release Dolma, a three-trillion-token English corpus, built from a diverse mixture of web content, scientific papers, code, public-domain books, social media, and encyclopedic materials. We extensively document Dolma, including its design principles, details about its construction, and a summary of its contents. We present analyses and experimental results on intermediate states of Dolma to share what we have learned about important data curation practices. Finally, we open-source our data curation toolkit to enable reproduction of our work as well as support further research in large-scale data curation.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 257,
          "function_name": "language_identification",
          "code": "model_url = \"https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 258,
          "function_name": "language_identification",
          "code": "model_path = \"var/lid.176.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 259,
          "function_name": "language_identification",
          "code": "download_file(model_url, model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 260,
          "function_name": "language_identification",
          "code": "model = fasttext.load_model(model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 263,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"The quick brown fox jumps over the lazy dog.\"])  # English @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__en']], [array([0.7162101], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 264,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"])  # Duplicate @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__en']], [array([0.7185209], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 265,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"OMG that movie was \ud83d\udd25\ud83d\udd25! So dope \ud83d\ude0e\ud83e\udd18!\"])  # Informal English @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__en']], [array([0.99213725], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 266,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"Auf dem Wasser zu singen\"])  # German @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__de']], [array([0.97517276], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 267,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"The quadratic formula is $x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}$.\"])  # Latex @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__en']], [array([0.48865604], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 268,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"for (int i = 0; i < 10; i++)\"])  # C++ @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__ru']], [array([0.24752462], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 269,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"Hello!\"])  # English @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__it']], [array([0.4400628], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 270,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"Bonjour!\"])  # French @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__fr']], [array([0.8673], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 271,
          "function_name": "language_identification",
          "code": "predictions = model.predict([\"Feliz Navidad / Pr\u00f3spero a\u00f1o y felicidad / I wanna wish you a Merry Christmas\"])  # Spanish + English @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__es']], [array([0.935495], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 273,
          "function_name": "language_identification",
          "code": "text(\"Caveats:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Caveats:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 274,
          "function_name": "language_identification",
          "code": "text(\"- Difficult for short sequences\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Difficult for short sequences",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 275,
          "function_name": "language_identification",
          "code": "text(\"- Difficult for low-resource languages\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Difficult for low-resource languages",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 276,
          "function_name": "language_identification",
          "code": "text(\"- Could accidentally filter out dialects of English\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Could accidentally filter out dialects of English",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 277,
          "function_name": "language_identification",
          "code": "text(\"- Hard for similar languages (Malay and Indonesian)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hard for similar languages (Malay and Indonesian)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 278,
          "function_name": "language_identification",
          "code": "text(\"- Ill-defined for code-switching (e.g., Spanish + English)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Ill-defined for code-switching (e.g., Spanish + English)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 280,
          "function_name": "language_identification",
          "code": "text(\"OpenMathText \"), link(\"https://arxiv.org/pdf/2310.06786\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "OpenMathText ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "OpenWebMath: An Open Dataset of High-Quality Mathematical Web Text",
            "authors": [
              "Keiran Paster",
              "Marco Dos Santos",
              "Zhangir Azerbayev",
              "Jimmy Ba"
            ],
            "organization": null,
            "date": "2023-10-10T16:57:28Z",
            "url": "https://arxiv.org/pdf/2310.06786",
            "description": "There is growing evidence that pretraining on high quality, carefully thought-out tokens such as code or mathematics plays an important role in improving the reasoning abilities of large language models. For example, Minerva, a PaLM model finetuned on billions of tokens of mathematical documents from arXiv and the web, reported dramatically improved performance on problems that require quantitative reasoning. However, because all known open source web datasets employ preprocessing that does not faithfully preserve mathematical notation, the benefits of large scale training on quantitive web documents are unavailable to the research community. We introduce OpenWebMath, an open dataset inspired by these works containing 14.7B tokens of mathematical webpages from Common Crawl. We describe in detail our method for extracting text and LaTeX content and removing boilerplate from HTML documents, as well as our methods for quality filtering and deduplication. Additionally, we run small-scale experiments by training 1.4B parameter language models on OpenWebMath, showing that models trained on 14.7B tokens of our dataset surpass the performance of models trained on over 20x the amount of general language data. We hope that our dataset, openly released on the Hugging Face Hub, will help spur advances in the reasoning abilities of large language models.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 281,
          "function_name": "language_identification",
          "code": "text(\"- Goal: curate large corpus of mathematical text from CommonCrawl\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Goal: curate large corpus of mathematical text from CommonCrawl",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 282,
          "function_name": "language_identification",
          "code": "text(\"- Use rules to filter (e.g., contains latex commands)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Use rules to filter (e.g., contains latex commands)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 283,
          "function_name": "language_identification",
          "code": "text(\"- KenLM trained on ProofPile, keep if perplexity < 15000\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- KenLM trained on ProofPile, keep if perplexity < 15000",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 284,
          "function_name": "language_identification",
          "code": "text(\"- Trained fastText classifier to predict mathematical writing, threshold is 0.17 if math, 0.8 if no math\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Trained fastText classifier to predict mathematical writing, threshold is 0.17 if math, 0.8 if no math",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 285,
          "function_name": "language_identification",
          "code": "text(\"Result: produced 14.7B tokens, used to train 1.4B models that do better than models trained on 20x data\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Result: produced 14.7B tokens, used to train 1.4B models that do better than models trained on 20x data",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 234,
          "function_name": "filtering_applications",
          "code": "language_identification()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 288,
          "function_name": "quality_filtering",
          "code": "def quality_filtering():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 289,
          "function_name": "quality_filtering",
          "code": "text(\"- Some deliberately do not use model-based filtering (C4, Gopher, RefinedWeb, FineWeb, Dolma)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Some deliberately do not use model-based filtering (C4, Gopher, RefinedWeb, FineWeb, Dolma)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 290,
          "function_name": "quality_filtering",
          "code": "text(\"- Some use model-based filtering (GPT-3, LLaMA, DCLM) [becoming the norm]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Some use model-based filtering (GPT-3, LLaMA, DCLM) [becoming the norm]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 292,
          "function_name": "quality_filtering",
          "code": "text(\"**GPT-3** \"), link(\"https://arxiv.org/pdf/2005.14165\")  # Appendix A"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**GPT-3** ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Language Models are Few-Shot Learners",
            "authors": [
              "Tom B. Brown",
              "Benjamin Mann",
              "Nick Ryder",
              "Melanie Subbiah",
              "Jared Kaplan",
              "Prafulla Dhariwal",
              "Arvind Neelakantan",
              "Pranav Shyam",
              "Girish Sastry",
              "Amanda Askell",
              "Sandhini Agarwal",
              "Ariel Herbert-Voss",
              "Gretchen Krueger",
              "Tom Henighan",
              "Rewon Child",
              "Aditya Ramesh",
              "Daniel M. Ziegler",
              "Jeffrey Wu",
              "Clemens Winter",
              "Christopher Hesse",
              "Mark Chen",
              "Eric Sigler",
              "Mateusz Litwin",
              "Scott Gray",
              "Benjamin Chess",
              "Jack Clark",
              "Christopher Berner",
              "Sam McCandlish",
              "Alec Radford",
              "Ilya Sutskever",
              "Dario Amodei"
            ],
            "organization": null,
            "date": "2020-05-28T17:29:03Z",
            "url": "https://arxiv.org/pdf/2005.14165",
            "description": "Recent work has demonstrated substantial gains on many NLP tasks and benchmarks by pre-training on a large corpus of text followed by fine-tuning on a specific task. While typically task-agnostic in architecture, this method still requires task-specific fine-tuning datasets of thousands or tens of thousands of examples. By contrast, humans can generally perform a new language task from only a few examples or from simple instructions - something which current NLP systems still largely struggle to do. Here we show that scaling up language models greatly improves task-agnostic, few-shot performance, sometimes even reaching competitiveness with prior state-of-the-art fine-tuning approaches. Specifically, we train GPT-3, an autoregressive language model with 175 billion parameters, 10x more than any previous non-sparse language model, and test its performance in the few-shot setting. For all tasks, GPT-3 is applied without any gradient updates or fine-tuning, with tasks and few-shot demonstrations specified purely via text interaction with the model. GPT-3 achieves strong performance on many NLP datasets, including translation, question-answering, and cloze tasks, as well as several tasks that require on-the-fly reasoning or domain adaptation, such as unscrambling words, using a novel word in a sentence, or performing 3-digit arithmetic. At the same time, we also identify some datasets where GPT-3's few-shot learning still struggles, as well as some datasets where GPT-3 faces methodological issues related to training on large web corpora. Finally, we find that GPT-3 can generate samples of news articles which human evaluators have difficulty distinguishing from articles written by humans. We discuss broader societal impacts of this finding and of GPT-3 in general.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 293,
          "function_name": "quality_filtering",
          "code": "text(\"- Positives: samples from {Wikipedia, WebText2, Books1, Books2}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Positives: samples from {Wikipedia, WebText2, Books1, Books2}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 294,
          "function_name": "quality_filtering",
          "code": "text(\"- Negatives: samples from CommonCrawl\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Negatives: samples from CommonCrawl",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 295,
          "function_name": "quality_filtering",
          "code": "image(\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Probability_density_function_of_Pareto_distribution.svg/325px-Probability_density_function_of_Pareto_distribution.svg.png\", width=0.5)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-f6740f86942b62021ef254624d82476e-https_upload_wikimedia_org_wikipedia_commons_thumb_1_11_Probability_density_function_of_Pareto_distribution_svg_325px-Probability_density_function_of_Pareto_distribution_svg_png",
          "style": {
            "width": 0.5
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 296,
          "function_name": "quality_filtering",
          "code": "text(\"Train linear classifier based on word features \"), article_link(\"https://spark.apache.org/docs/latest/ml-features#tokenizer\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Train linear classifier based on word features ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://spark.apache.org/docs/latest/ml-features#tokenizer",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 297,
          "function_name": "quality_filtering",
          "code": "text(\"Keep documents stochastically based on score\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Keep documents stochastically based on score",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 298,
          "function_name": "quality_filtering",
          "code": "def keep_document(score: float) -> bool:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 301,
          "function_name": "quality_filtering",
          "code": "text(\"** LLaMA/RedPajama** \"), link(\"https://arxiv.org/pdf/2302.13971\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "** LLaMA/RedPajama** ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "LLaMA: Open and Efficient Foundation Language Models",
            "authors": [
              "Hugo Touvron",
              "Thibaut Lavril",
              "Gautier Izacard",
              "Xavier Martinet",
              "Marie-Anne Lachaux",
              "Timoth\u00e9e Lacroix",
              "Baptiste Rozi\u00e8re",
              "Naman Goyal",
              "Eric Hambro",
              "Faisal Azhar",
              "Aurelien Rodriguez",
              "Armand Joulin",
              "Edouard Grave",
              "Guillaume Lample"
            ],
            "organization": null,
            "date": "2023-02-27T17:11:15Z",
            "url": "https://arxiv.org/pdf/2302.13971",
            "description": "We introduce LLaMA, a collection of foundation language models ranging from 7B to 65B parameters. We train our models on trillions of tokens, and show that it is possible to train state-of-the-art models using publicly available datasets exclusively, without resorting to proprietary and inaccessible datasets. In particular, LLaMA-13B outperforms GPT-3 (175B) on most benchmarks, and LLaMA-65B is competitive with the best models, Chinchilla-70B and PaLM-540B. We release all our models to the research community.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 302,
          "function_name": "quality_filtering",
          "code": "text(\"- Positives: samples from pages **referenced** by Wikipedia\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Positives: samples from pages **referenced** by Wikipedia",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 303,
          "function_name": "quality_filtering",
          "code": "text(\"- Negatives: samples from CommonCrawl\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Negatives: samples from CommonCrawl",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 304,
          "function_name": "quality_filtering",
          "code": "text(\"- Keep documents that are classified positive\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Keep documents that are classified positive",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 306,
          "function_name": "quality_filtering",
          "code": "text(\"**phi-1** \"), link(\"https://arxiv.org/pdf/2306.11644\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**phi-1** ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Textbooks Are All You Need",
            "authors": [
              "Suriya Gunasekar",
              "Yi Zhang",
              "Jyoti Aneja",
              "Caio C\u00e9sar Teodoro Mendes",
              "Allie Del Giorno",
              "Sivakanth Gopi",
              "Mojan Javaheripi",
              "Piero Kauffmann",
              "Gustavo de Rosa",
              "Olli Saarikivi",
              "Adil Salim",
              "Shital Shah",
              "Harkirat Singh Behl",
              "Xin Wang",
              "S\u00e9bastien Bubeck",
              "Ronen Eldan",
              "Adam Tauman Kalai",
              "Yin Tat Lee",
              "Yuanzhi Li"
            ],
            "organization": null,
            "date": "2023-06-20T16:14:25Z",
            "url": "https://arxiv.org/pdf/2306.11644",
            "description": "We introduce phi-1, a new large language model for code, with significantly smaller size than competing models: phi-1 is a Transformer-based model with 1.3B parameters, trained for 4 days on 8 A100s, using a selection of ``textbook quality\" data from the web (6B tokens) and synthetically generated textbooks and exercises with GPT-3.5 (1B tokens). Despite this small scale, phi-1 attains pass@1 accuracy 50.6% on HumanEval and 55.5% on MBPP. It also displays surprising emergent properties compared to phi-1-base, our model before our finetuning stage on a dataset of coding exercises, and phi-1-small, a smaller model with 350M parameters trained with the same pipeline as phi-1 that still achieves 45% on HumanEval.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 307,
          "function_name": "quality_filtering",
          "code": "text(\"Philosophy: really high quality data (textbooks) to train a small model (1.5B)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Philosophy: really high quality data (textbooks) to train a small model (1.5B)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 308,
          "function_name": "quality_filtering",
          "code": "text(\"Includes synthetic data from GPT 3.5 (later: GPT-4) and filtered data\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Includes synthetic data from GPT 3.5 (later: GPT-4) and filtered data",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 310,
          "function_name": "quality_filtering",
          "code": "R = \"Python subset of the Stack\"   # Raw data"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 311,
          "function_name": "quality_filtering",
          "code": "prompt = \"determine its educational value for a student whose goal is to learn basic coding concepts\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 312,
          "function_name": "quality_filtering",
          "code": "T = \"Use GPT-4 with this prompt to classify 100K subset of R to get positive examples\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 313,
          "function_name": "quality_filtering",
          "code": "text(\"Train random forest classifier on T using output embedding from pretrained codegen model\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Train random forest classifier on T using output embedding from pretrained codegen model",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 314,
          "function_name": "quality_filtering",
          "code": "text(\"Select data from R that is classified positive by the classifier\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Select data from R that is classified positive by the classifier",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 316,
          "function_name": "quality_filtering",
          "code": "text(\"Result on [HumanEval](https://huggingface.co/datasets/openai_humaneval):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Result on [HumanEval](https://huggingface.co/datasets/openai_humaneval):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 317,
          "function_name": "quality_filtering",
          "code": "text(\"- Train 1.3B LM on Python subset of The Stack (performance: 12.19% after 96K steps)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Train 1.3B LM on Python subset of The Stack (performance: 12.19% after 96K steps)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 318,
          "function_name": "quality_filtering",
          "code": "text(\"- Train 1.3B LM on new filtered subset (performance: 17.68% after 36K steps) - better!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Train 1.3B LM on new filtered subset (performance: 17.68% after 36K steps) - better!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 235,
          "function_name": "filtering_applications",
          "code": "quality_filtering()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 327,
          "function_name": "toxicity_filtering",
          "code": "def toxicity_filtering():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 329,
          "function_name": "toxicity_filtering",
          "code": "text(\"Toxicity filtering in Dolma \"), link(dolma)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Toxicity filtering in Dolma ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Dolma: an Open Corpus of Three Trillion Tokens for Language Model Pretraining Research",
            "authors": [
              "Luca Soldaini",
              "Rodney Kinney",
              "Akshita Bhagia",
              "Dustin Schwenk",
              "David Atkinson",
              "Russell Authur",
              "Ben Bogin",
              "Khyathi Chandu",
              "Jennifer Dumas",
              "Yanai Elazar",
              "Valentin Hofmann",
              "Ananya Harsh Jha",
              "Sachin Kumar",
              "Li Lucy",
              "Xinxi Lyu",
              "Nathan Lambert",
              "Ian Magnusson",
              "Jacob Morrison",
              "Niklas Muennighoff",
              "Aakanksha Naik",
              "Crystal Nam",
              "Matthew E. Peters",
              "Abhilasha Ravichander",
              "Kyle Richardson",
              "Zejiang Shen",
              "Emma Strubell",
              "Nishant Subramani",
              "Oyvind Tafjord",
              "Pete Walsh",
              "Luke Zettlemoyer",
              "Noah A. Smith",
              "Hannaneh Hajishirzi",
              "Iz Beltagy",
              "Dirk Groeneveld",
              "Jesse Dodge",
              "Kyle Lo"
            ],
            "organization": null,
            "date": "2024-01-31T20:29:50Z",
            "url": "https://arxiv.org/abs/2402.00159",
            "description": "Information about pretraining corpora used to train the current best-performing language models is seldom discussed: commercial models rarely detail their data, and even open models are often released without accompanying training data or recipes to reproduce them. As a result, it is challenging to conduct and advance scientific research on language modeling, such as understanding how training data impacts model capabilities and limitations. To facilitate scientific research on language model pretraining, we curate and release Dolma, a three-trillion-token English corpus, built from a diverse mixture of web content, scientific papers, code, public-domain books, social media, and encyclopedic materials. We extensively document Dolma, including its design principles, details about its construction, and a summary of its contents. We present analyses and experimental results on intermediate states of Dolma to share what we have learned about important data curation practices. Finally, we open-source our data curation toolkit to enable reproduction of our work as well as support further research in large-scale data curation.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 331,
          "function_name": "toxicity_filtering",
          "code": "text(\"Dataset: Jigsaw Toxic Comments dataset (2018) \"), named_link(\"dataset\", \"https://www.kaggle.com/datasets/julian3833/jigsaw-toxic-comment-classification-challenge\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Dataset: Jigsaw Toxic Comments dataset (2018) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [dataset]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.kaggle.com/datasets/julian3833/jigsaw-toxic-comment-classification-challenge",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 332,
          "function_name": "toxicity_filtering",
          "code": "text(\"- Project goal: help people have better discussions online \"), article_link(\"https://www.kaggle.com/competitions/jigsaw-toxic-comment-classification-challenge/discussion/46064\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Project goal: help people have better discussions online ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.kaggle.com/competitions/jigsaw-toxic-comment-classification-challenge/discussion/46064",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 333,
          "function_name": "toxicity_filtering",
          "code": "text(\"- Data: comments on Wikipedia talk page annotated with {toxic, severe_toxic, obscene, threat, insult, identity_hate}\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Data: comments on Wikipedia talk page annotated with {toxic, severe_toxic, obscene, threat, insult, identity_hate}",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 335,
          "function_name": "toxicity_filtering",
          "code": "text(\"Trained 2 fastText classifiers\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Trained 2 fastText classifiers",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 336,
          "function_name": "toxicity_filtering",
          "code": "text(\"- hate: positive = {unlabeled, obscene}, negative = all else\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- hate: positive = {unlabeled, obscene}, negative = all else",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 337,
          "function_name": "toxicity_filtering",
          "code": "text(\"- NSFW: positive = {obscene}, negative = all else\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- NSFW: positive = {obscene}, negative = all else",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 341,
          "function_name": "toxicity_filtering",
          "code": "Example(label=0, text=\"Are you threatening me for disputing neutrality? I know in your country it's quite common to bully your way through a discussion and push outcomes you want. But this is not Russia.\"),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 342,
          "function_name": "toxicity_filtering",
          "code": "Example(label=1, text=\"Stupid peace of shit stop deleting my stuff asshole go die and fall in a hole go to hell!\"),"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 340,
          "function_name": "toxicity_filtering",
          "code": "train_examples = ["
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 346,
          "function_name": "toxicity_filtering",
          "code": "model_url = \"https://dolma-artifacts.org/fasttext_models/jigsaw_fasttext_bigrams_20230515/jigsaw_fasttext_bigrams_nsfw_final.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 347,
          "function_name": "toxicity_filtering",
          "code": "model_path = \"var/jigsaw_fasttext_bigrams_nsfw_final.bin\""
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 348,
          "function_name": "toxicity_filtering",
          "code": "download_file(model_url, model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 349,
          "function_name": "toxicity_filtering",
          "code": "model = fasttext.load_model(model_path)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 352,
          "function_name": "toxicity_filtering",
          "code": "predictions = model.predict([train_examples[0].text])  # @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__non-nsfw']], [array([0.9999542], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 353,
          "function_name": "toxicity_filtering",
          "code": "predictions = model.predict([train_examples[1].text])  # @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__nsfw']], [array([1.00001], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 354,
          "function_name": "toxicity_filtering",
          "code": "predictions = model.predict([\"I love strawberries\"])  # @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__non-nsfw']], [array([1.00001], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 355,
          "function_name": "toxicity_filtering",
          "code": "predictions = model.predict([\"I hate strawberries\"])  # @inspect predictions"
        }
      ],
      "env": {
        "predictions": "([['__label__non-nsfw']], [array([1.00001], dtype=float32)])"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 236,
          "function_name": "filtering_applications",
          "code": "toxicity_filtering()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 29,
          "function_name": "main",
          "code": "filtering_applications()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 367,
          "function_name": "deduplication",
          "code": "def deduplication():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 368,
          "function_name": "deduplication",
          "code": "text(\"Two types of duplicates:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Two types of duplicates:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 369,
          "function_name": "deduplication",
          "code": "text(\"- Exact duplicates (mirror sites, GitHub forks) \"), named_link(\"Gutenberg mirrors\", \"https://www.gutenberg.org/MIRRORS.ALL\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Exact duplicates (mirror sites, GitHub forks) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [Gutenberg mirrors]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.gutenberg.org/MIRRORS.ALL",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 370,
          "function_name": "deduplication",
          "code": "text(\"- Near duplicates: same text differing by a few tokens\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Near duplicates: same text differing by a few tokens",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 372,
          "function_name": "deduplication",
          "code": "text(\"Examples of near duplicates:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Examples of near duplicates:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 373,
          "function_name": "deduplication",
          "code": "text(\"- Terms of service and licenses \"), named_link(\"MIT license\", \"https://opensource.org/license/mit\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Terms of service and licenses ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [MIT license]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://opensource.org/license/mit",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 374,
          "function_name": "deduplication",
          "code": "text(\"- Formulaic writing (copy/pasted or generated from a template) \"), image(\"https://d3i71xaburhd42.cloudfront.net/4566c0d22ebf3c31180066ab23b6c445aeec78d5/5-Table1-1.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Formulaic writing (copy/pasted or generated from a template) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "image",
          "data": "var/files/image-bd6f945561f42be108f3dd1de0ace52e-https_d3i71xaburhd42_cloudfront_net_4566c0d22ebf3c31180066ab23b6c445aeec78d5_5-Table1-1_png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 375,
          "function_name": "deduplication",
          "code": "text(\"- Minor formatting differences in copy/pasting\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Minor formatting differences in copy/pasting",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 377,
          "function_name": "deduplication",
          "code": "text(\"Product description repeated 61,036 times in C4\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Product description repeated 61,036 times in C4",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 378,
          "function_name": "deduplication",
          "code": "text(\"'\u201cby combining fantastic ideas, interesting arrangements, and follow the current trends in the field of that make you more inspired and give artistic touches. We\u2019d be honored if you can apply some or all of these design in your wedding.  believe me, brilliant ideas would be perfect if it can be applied in real and make the people around you amazed!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "'\u201cby combining fantastic ideas, interesting arrangements, and follow the current trends in the field of that make you more inspired and give artistic touches. We\u2019d be honored if you can apply some or all of these design in your wedding.  believe me, brilliant ideas would be perfect if it can be applied in real and make the people around you amazed!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 379,
          "function_name": "deduplication",
          "code": "named_link(\"example page\", \"https://www.amazon.co.uk/suryagede-100-Graffiti-Gas-Mask/dp/B07CRHT3RG\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [example page]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://www.amazon.co.uk/suryagede-100-Graffiti-Gas-Mask/dp/B07CRHT3RG",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 381,
          "function_name": "deduplication",
          "code": "text(\"Deduplication training data makes language models better \"), link(\"https://arxiv.org/pdf/2107.06499\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Deduplication training data makes language models better ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Deduplicating Training Data Makes Language Models Better",
            "authors": [
              "Katherine Lee",
              "Daphne Ippolito",
              "Andrew Nystrom",
              "Chiyuan Zhang",
              "Douglas Eck",
              "Chris Callison-Burch",
              "Nicholas Carlini"
            ],
            "organization": null,
            "date": "2021-07-14T06:06:52Z",
            "url": "https://arxiv.org/pdf/2107.06499",
            "description": "We find that existing language modeling datasets contain many near-duplicate examples and long repetitive substrings. As a result, over 1% of the unprompted output of language models trained on these datasets is copied verbatim from the training data. We develop two tools that allow us to deduplicate training datasets -- for example removing from C4 a single 61 word English sentence that is repeated over 60,000 times. Deduplication allows us to train models that emit memorized text ten times less frequently and require fewer train steps to achieve the same or better accuracy. We can also reduce train-test overlap, which affects over 4% of the validation set of standard datasets, thus allowing for more accurate evaluation. We release code for reproducing our work and performing dataset deduplication at https://github.com/google-research/deduplicate-text-datasets.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 382,
          "function_name": "deduplication",
          "code": "text(\"- Train more efficiently (because have fewer tokens)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Train more efficiently (because have fewer tokens)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 383,
          "function_name": "deduplication",
          "code": "text(\"- Avoid memorization (can mitigate copyright, privacy concerns)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Avoid memorization (can mitigate copyright, privacy concerns)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 385,
          "function_name": "deduplication",
          "code": "text(\"Design space:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Design space:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 386,
          "function_name": "deduplication",
          "code": "text(\"1. What is an item (sentence, paragraph, document)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. What is an item (sentence, paragraph, document)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 387,
          "function_name": "deduplication",
          "code": "text(\"2. How to match (exact match, existence of common subitem, fraction of common subitems)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How to match (exact match, existence of common subitem, fraction of common subitems)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 388,
          "function_name": "deduplication",
          "code": "text(\"3. What action to take (remove all, remove all but one)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. What action to take (remove all, remove all but one)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 390,
          "function_name": "deduplication",
          "code": "text(\"Key challenge:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key challenge:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 391,
          "function_name": "deduplication",
          "code": "text(\"- Deduplication is fundamentally about comparing items to other items\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Deduplication is fundamentally about comparing items to other items",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 392,
          "function_name": "deduplication",
          "code": "text(\"- Need linear time algorithms to scale\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Need linear time algorithms to scale",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 403,
          "function_name": "hash_functions",
          "code": "def hash_functions():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 404,
          "function_name": "hash_functions",
          "code": "text(\"- Hash function h maps item to a hash value (integer or string)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hash function h maps item to a hash value (integer or string)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 405,
          "function_name": "hash_functions",
          "code": "text(\"- Hash value much smaller than item\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hash value much smaller than item",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 406,
          "function_name": "hash_functions",
          "code": "text(\"- Hash collision: h(x) = h(y) for x \u2260 y\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Hash collision: h(x) = h(y) for x \u2260 y",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 408,
          "function_name": "hash_functions",
          "code": "text(\"Tradeoff between efficiency and collision resistance \"),  article_link(\"https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Tradeoff between efficiency and collision resistance ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 409,
          "function_name": "hash_functions",
          "code": "text(\"- Cryptographic hash functions (SHA-256): collision resistant, slow (used in bitcoin)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Cryptographic hash functions (SHA-256): collision resistant, slow (used in bitcoin)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 410,
          "function_name": "hash_functions",
          "code": "text(\"- DJB2, MurmurHash, CityHash: not collision resistant, fast (used for hash tables)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- DJB2, MurmurHash, CityHash: not collision resistant, fast (used for hash tables)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 412,
          "function_name": "hash_functions",
          "code": "text(\"We will use MurmurHash:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We will use MurmurHash:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 413,
          "function_name": "hash_functions",
          "code": "h = mmh3.hash(\"hello\")  # @inspect h"
        }
      ],
      "env": {
        "h": 613153351
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 394,
          "function_name": "deduplication",
          "code": "hash_functions()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 416,
          "function_name": "exact_deduplication",
          "code": "def exact_deduplication():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 417,
          "function_name": "exact_deduplication",
          "code": "text(\"**Simple example**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Simple example**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 418,
          "function_name": "exact_deduplication",
          "code": "text(\"1. Item: string\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Item: string",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 419,
          "function_name": "exact_deduplication",
          "code": "text(\"2. How to match: exact match\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How to match: exact match",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 420,
          "function_name": "exact_deduplication",
          "code": "text(\"3. Action: remove all but one\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. Action: remove all but one",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 423,
          "function_name": "exact_deduplication",
          "code": "items = [\"Hello!\", \"hello\", \"hello there\", \"hello\", \"hi\", \"bye\"]  # @inspect items"
        }
      ],
      "env": {
        "items": [
          "Hello!",
          "hello",
          "hello there",
          "hello",
          "hi",
          "bye"
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 426,
          "function_name": "exact_deduplication",
          "code": "hash_items = itertools.groupby(sorted(items, key=mmh3.hash), key=mmh3.hash)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 429,
          "function_name": "exact_deduplication",
          "code": "deduped_items = [next(group) for h, group in hash_items]  # @inspect deduped_items"
        }
      ],
      "env": {
        "deduped_items": [
          "hi",
          "bye",
          "hello",
          "hello there",
          "Hello!"
        ]
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 431,
          "function_name": "exact_deduplication",
          "code": "text(\"- Pro: simple, clear semantics, high precision\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Pro: simple, clear semantics, high precision",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 432,
          "function_name": "exact_deduplication",
          "code": "text(\"- Con: does not deduplicate near duplicates\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Con: does not deduplicate near duplicates",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 433,
          "function_name": "exact_deduplication",
          "code": "text(\"- This code is written in a MapReduce way, can easily parallelize and scale\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- This code is written in a MapReduce way, can easily parallelize and scale",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 435,
          "function_name": "exact_deduplication",
          "code": "text(\"**C4** \"), link(\"https://arxiv.org/pdf/1910.10683v4\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**C4** ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer",
            "authors": [
              "Colin Raffel",
              "Noam Shazeer",
              "Adam Roberts",
              "Katherine Lee",
              "Sharan Narang",
              "Michael Matena",
              "Yanqi Zhou",
              "Wei Li",
              "Peter J. Liu"
            ],
            "organization": null,
            "date": "2019-10-23T17:37:36Z",
            "url": "https://arxiv.org/pdf/1910.10683v4",
            "description": "Transfer learning, where a model is first pre-trained on a data-rich task before being fine-tuned on a downstream task, has emerged as a powerful technique in natural language processing (NLP). The effectiveness of transfer learning has given rise to a diversity of approaches, methodology, and practice. In this paper, we explore the landscape of transfer learning techniques for NLP by introducing a unified framework that converts all text-based language problems into a text-to-text format. Our systematic study compares pre-training objectives, architectures, unlabeled data sets, transfer approaches, and other factors on dozens of language understanding tasks. By combining the insights from our exploration with scale and our new ``Colossal Clean Crawled Corpus'', we achieve state-of-the-art results on many benchmarks covering summarization, question answering, text classification, and more. To facilitate future work on transfer learning for NLP, we release our data set, pre-trained models, and code.",
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 436,
          "function_name": "exact_deduplication",
          "code": "text(\"1. Item: 3-sentence spans\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1. Item: 3-sentence spans",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 437,
          "function_name": "exact_deduplication",
          "code": "text(\"2. How to match: use exact match\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2. How to match: use exact match",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 438,
          "function_name": "exact_deduplication",
          "code": "text(\"3. Action: remove all but one\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3. Action: remove all but one",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 439,
          "function_name": "exact_deduplication",
          "code": "text(\"Warning: when a 3-sentence span is removed from the middle of a document, the resulting document might not be coherent\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Warning: when a 3-sentence span is removed from the middle of a document, the resulting document might not be coherent",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 396,
          "function_name": "deduplication",
          "code": "exact_deduplication()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 442,
          "function_name": "bloom_filter",
          "code": "def bloom_filter():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 443,
          "function_name": "bloom_filter",
          "code": "text(\"Goal: efficient, approximate data structure for testing set membership\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Goal: efficient, approximate data structure for testing set membership",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 445,
          "function_name": "bloom_filter",
          "code": "text(\"Features of Bloom filters\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Features of Bloom filters",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 446,
          "function_name": "bloom_filter",
          "code": "text(\"- Memory efficient\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Memory efficient",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 447,
          "function_name": "bloom_filter",
          "code": "text(\"- Can update, but can't delete\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Can update, but can't delete",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 448,
          "function_name": "bloom_filter",
          "code": "text(\"- If return 'no', definitely 'no'\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If return 'no', definitely 'no'",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 449,
          "function_name": "bloom_filter",
          "code": "text(\"- If return 'yes', most likely 'yes', but small probability of 'no'\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If return 'yes', most likely 'yes', but small probability of 'no'",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 450,
          "function_name": "bloom_filter",
          "code": "text(\"- Can drive the false positive rate down exponentially with more time/compute\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Can drive the false positive rate down exponentially with more time/compute",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 452,
          "function_name": "bloom_filter",
          "code": "items = [\"the\", \"cat\", \"in\", \"the\", \"hat\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 453,
          "function_name": "bloom_filter",
          "code": "non_items = [\"what\", \"who\", \"why\", \"when\", \"where\", \"which\", \"how\"]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 455,
          "function_name": "bloom_filter",
          "code": "text(\"First, make the range of hash function small (small number of bins).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "First, make the range of hash function small (small number of bins).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 456,
          "function_name": "bloom_filter",
          "code": "m = 8  # Number of bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 514,
          "function_name": "build_table",
          "code": "def build_table(items: list[str], num_bins: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 516,
          "function_name": "build_table",
          "code": "table = bitarray(num_bins)  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00000000')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 518,
          "function_name": "build_table",
          "code": "h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h"
        }
      ],
      "env": {
        "item": "the",
        "h": 2
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 519,
          "function_name": "build_table",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100000')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 518,
          "function_name": "build_table",
          "code": "h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h"
        }
      ],
      "env": {
        "item": "cat",
        "h": 7
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 519,
          "function_name": "build_table",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100001')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 518,
          "function_name": "build_table",
          "code": "h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h"
        }
      ],
      "env": {
        "item": "in",
        "h": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 519,
          "function_name": "build_table",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100001')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 518,
          "function_name": "build_table",
          "code": "h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h"
        }
      ],
      "env": {
        "item": "the",
        "h": 2
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 519,
          "function_name": "build_table",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100001')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 518,
          "function_name": "build_table",
          "code": "h = mmh3.hash(item) % num_bins  # @inspect item, @inspect h"
        }
      ],
      "env": {
        "item": "hat",
        "h": 4
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 519,
          "function_name": "build_table",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01101001')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 517,
          "function_name": "build_table",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 520,
          "function_name": "build_table",
          "code": "return table"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 457,
          "function_name": "bloom_filter",
          "code": "table = build_table(items, m)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 459,
          "function_name": "bloom_filter",
          "code": "assert query_table(table, item, m) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 458,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 460,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table(table, item, m) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 461,
          "function_name": "bloom_filter",
          "code": "num_mistakes = count(result.values(), True)  # @inspect num_mistakes"
        }
      ],
      "env": {
        "num_mistakes": 4
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 462,
          "function_name": "bloom_filter",
          "code": "false_positive_rate = num_mistakes / (len(items) + num_mistakes)  # @inspect false_positive_rate"
        }
      ],
      "env": {
        "false_positive_rate": 0.4444444444444444
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 463,
          "function_name": "bloom_filter",
          "code": "text(\"Problem: false positives for small bins\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Problem: false positives for small bins",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 465,
          "function_name": "bloom_filter",
          "code": "text(\"Naive solution: increase the number of bins\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Naive solution: increase the number of bins",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 466,
          "function_name": "bloom_filter",
          "code": "text(\"Error probability is O(1/num_bins), decreases polynomially with memory\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Error probability is O(1/num_bins), decreases polynomially with memory",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 468,
          "function_name": "bloom_filter",
          "code": "text(\"Better solution: use more hash functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Better solution: use more hash functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 469,
          "function_name": "bloom_filter",
          "code": "k = 2  # Number of hash functions"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 523,
          "function_name": "build_table_k",
          "code": "def build_table_k(items: list[str], num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 526,
          "function_name": "build_table_k",
          "code": "table = bitarray(num_bins)  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00000000')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "the",
        "h": 2,
        "seed": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100000')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "the",
        "h": 5,
        "seed": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100100')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "cat",
        "h": 7,
        "seed": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100101')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "cat",
        "h": 7,
        "seed": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('00100101')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "in",
        "h": 1,
        "seed": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100101')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "in",
        "h": 6,
        "seed": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100111')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "the",
        "h": 2,
        "seed": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100111')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "the",
        "h": 5,
        "seed": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01100111')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "hat",
        "h": 4,
        "seed": 0
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01101111')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 530,
          "function_name": "build_table_k",
          "code": "h = mmh3.hash(item, seed) % num_bins  # @inspect item, @inspect h, @inspect seed"
        }
      ],
      "env": {
        "item": "hat",
        "h": 6,
        "seed": 1
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 531,
          "function_name": "build_table_k",
          "code": "table[h] = 1  # @inspect table"
        }
      ],
      "env": {
        "table": "bitarray('01101111')"
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 529,
          "function_name": "build_table_k",
          "code": "for seed in range(k):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 527,
          "function_name": "build_table_k",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 532,
          "function_name": "build_table_k",
          "code": "return table"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 470,
          "function_name": "bloom_filter",
          "code": "table = build_table_k(items, m, k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 472,
          "function_name": "bloom_filter",
          "code": "assert query_table_k(table, item, m, k) == 1"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 471,
          "function_name": "bloom_filter",
          "code": "for item in items:"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 1,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 541,
          "function_name": "query_table_k",
          "code": "def query_table_k(table: bitarray, item: str, num_bins: int, k: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "query_table_k",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "<genexpr>",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 545,
          "function_name": "<genexpr>",
          "code": "for seed in range(k)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 535,
          "function_name": "query_table",
          "code": "def query_table(table: bitarray, item: str, num_bins: int, seed: int = 0):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 537,
          "function_name": "query_table",
          "code": "h = mmh3.hash(item, seed) % num_bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 538,
          "function_name": "query_table",
          "code": "return table[h]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        },
        {
          "path": "lecture_14.py",
          "line_number": 544,
          "function_name": "<genexpr>",
          "code": "query_table(table, item, num_bins, seed)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        },
        {
          "path": "lecture_14.py",
          "line_number": 543,
          "function_name": "query_table_k",
          "code": "return int(all("
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 473,
          "function_name": "bloom_filter",
          "code": "result = {item: query_table_k(table, item, m, k) for item in non_items}  # @inspect result"
        }
      ],
      "env": {
        "result": {
          "what": 1,
          "who": 0,
          "why": 0,
          "when": 0,
          "where": 1,
          "which": 1,
          "how": 0
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 474,
          "function_name": "bloom_filter",
          "code": "num_mistakes = count(result.values(), 1)  # @inspect num_mistakes"
        }
      ],
      "env": {
        "num_mistakes": 3
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 475,
          "function_name": "bloom_filter",
          "code": "false_positive_rate = num_mistakes / (len(items) + num_mistakes)  # @inspect false_positive_rate"
        }
      ],
      "env": {
        "false_positive_rate": 0.375
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 476,
          "function_name": "bloom_filter",
          "code": "text(\"Reduced the false positive rate!\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Reduced the false positive rate!",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 481,
          "function_name": "false_positive_rate_analysis",
          "code": "def false_positive_rate_analysis():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 482,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Assume independence of hash functions and items \"), article_link(\"https://en.wikipedia.org/wiki/Bloom_filter\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Assume independence of hash functions and items ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [article]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://en.wikipedia.org/wiki/Bloom_filter",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 483,
          "function_name": "false_positive_rate_analysis",
          "code": "m = 1000   # Number of bins"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 484,
          "function_name": "false_positive_rate_analysis",
          "code": "k = 10     # Number of hash functions"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 485,
          "function_name": "false_positive_rate_analysis",
          "code": "n = 100    # Number of items we're inserting"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 487,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Consider a test input (not in the set) that would hash into a given test bin (say, i).\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Consider a test input (not in the set) that would hash into a given test bin (say, i).",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 488,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Now consider putting items into the Bloom filter and seeing if it hits i.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now consider putting items into the Bloom filter and seeing if it hits i.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 492,
          "function_name": "false_positive_rate_analysis",
          "code": "f = 1 / m                              # P[B(i) = 1 after 1 insertion with 1 hash function]  # @inspect f"
        }
      ],
      "env": {
        "f": 0.001
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 494,
          "function_name": "false_positive_rate_analysis",
          "code": "f = 1 - (1 - 1 / m) ** k               # P[B(i) = 1 after 1 insertion with k hash functions]  # @inspect f"
        }
      ],
      "env": {
        "f": 0.009955119790251765
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 498,
          "function_name": "false_positive_rate_analysis",
          "code": "f = 1 - (1 - 1 / m) ** (k * n)         # P[B(i) = 1 after n insertions for 1 hash function]  # @inspect f"
        }
      ],
      "env": {
        "f": 0.6323045752290363
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 500,
          "function_name": "false_positive_rate_analysis",
          "code": "f = f ** k                             # P[B(i) = 1 after n insertions for k hash functions]  # @inspect f"
        }
      ],
      "env": {
        "f": 0.010215585027679068
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 502,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Optimal value of k (given fixed m / n ratio) [results in f ~ 0.5]\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Optimal value of k (given fixed m / n ratio) [results in f ~ 0.5]",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 503,
          "function_name": "false_positive_rate_analysis",
          "code": "k = math.log(2) * m / n  # @inspect k"
        }
      ],
      "env": {
        "k": 6.931471805599452
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 504,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Resulting false positive rate (improved)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Resulting false positive rate (improved)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 505,
          "function_name": "false_positive_rate_analysis",
          "code": "f = 0.5 ** k  # @inspect f"
        }
      ],
      "env": {
        "f": 0.008192549468178965
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 507,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Tradeoff between compute (k), memory (m), and false positive rate (f) \"), named_link(\"lecture notes\", \"https://people.eecs.berkeley.edu/~daw/teaching/cs170-s03/Notes/lecture10.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Tradeoff between compute (k), memory (m), and false positive rate (f) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [lecture notes]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "https://people.eecs.berkeley.edu/~daw/teaching/cs170-s03/Notes/lecture10.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 509,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"Example: Dolma\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example: Dolma",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 510,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"- Set false positive rate to 1e-15\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Set false positive rate to 1e-15",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 511,
          "function_name": "false_positive_rate_analysis",
          "code": "text(\"- Perform on items = paragraphs\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Perform on items = paragraphs",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 478,
          "function_name": "bloom_filter",
          "code": "false_positive_rate_analysis()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 397,
          "function_name": "deduplication",
          "code": "bloom_filter()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 549,
          "function_name": "jaccard_minhash",
          "code": "def jaccard_minhash():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 550,
          "function_name": "jaccard_minhash",
          "code": "text(\"Let's now look at approximate set membership.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Let's now look at approximate set membership.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 551,
          "function_name": "jaccard_minhash",
          "code": "text(\"First we need a similarity measure.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "First we need a similarity measure.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 553,
          "function_name": "jaccard_minhash",
          "code": "text(\"### Jaccard similarity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Jaccard similarity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 554,
          "function_name": "jaccard_minhash",
          "code": "text(\"Definition: Jaccard(A, B) = |A intersect B| / |A union B|\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Definition: Jaccard(A, B) = |A intersect B| / |A union B|",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 555,
          "function_name": "jaccard_minhash",
          "code": "A = {\"1\", \"2\", \"3\", \"4\"}"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 556,
          "function_name": "jaccard_minhash",
          "code": "B = {\"1\", \"2\", \"3\", \"5\"}"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 558,
          "function_name": "jaccard_minhash",
          "code": "def compute_jaccard(A, B):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        },
        {
          "path": "lecture_14.py",
          "line_number": 558,
          "function_name": "compute_jaccard",
          "code": "def compute_jaccard(A, B):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        },
        {
          "path": "lecture_14.py",
          "line_number": 559,
          "function_name": "compute_jaccard",
          "code": "intersection = len(A & B)  # @inspect intersection"
        }
      ],
      "env": {
        "intersection": 3
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        },
        {
          "path": "lecture_14.py",
          "line_number": 560,
          "function_name": "compute_jaccard",
          "code": "union = len(A | B)  # @inspect union"
        }
      ],
      "env": {
        "union": 5
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        },
        {
          "path": "lecture_14.py",
          "line_number": 561,
          "function_name": "compute_jaccard",
          "code": "return intersection / union"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 562,
          "function_name": "jaccard_minhash",
          "code": "jaccard = compute_jaccard(A, B)  # @inspect jaccard"
        }
      ],
      "env": {
        "jaccard": 0.6
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 564,
          "function_name": "jaccard_minhash",
          "code": "text(\"Definition: two documents are **near duplicates** if their Jaccard similarity >= threshold\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Definition: two documents are **near duplicates** if their Jaccard similarity >= threshold",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 566,
          "function_name": "jaccard_minhash",
          "code": "text(\"Algorithmic challenge: find near duplicates in linear time\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Algorithmic challenge: find near duplicates in linear time",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 568,
          "function_name": "jaccard_minhash",
          "code": "text(\"### MinHash\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### MinHash",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 569,
          "function_name": "jaccard_minhash",
          "code": "text(\"MinHash: a random hash function h so that Pr[h(A) = h(B)] = Jaccard(A, B)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "MinHash: a random hash function h so that Pr[h(A) = h(B)] = Jaccard(A, B)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 571,
          "function_name": "jaccard_minhash",
          "code": "text(\"Normally, you want different items to hash to different hashes\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Normally, you want different items to hash to different hashes",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 572,
          "function_name": "jaccard_minhash",
          "code": "text(\"...but here, you want collision probability to depend on similarity\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "...but here, you want collision probability to depend on similarity",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "jaccard_minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 577,
          "function_name": "jaccard_minhash",
          "code": "text(\"Characteristic matrix representation:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Characteristic matrix representation:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 578,
          "function_name": "jaccard_minhash",
          "code": "text(\"item | A | B\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "item | A | B",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 579,
          "function_name": "jaccard_minhash",
          "code": "text(\"1    | 1 | 1\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "1    | 1 | 1",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 580,
          "function_name": "jaccard_minhash",
          "code": "text(\"2    | 1 | 1\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "2    | 1 | 1",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 581,
          "function_name": "jaccard_minhash",
          "code": "text(\"3    | 1 | 1\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "3    | 1 | 1",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 582,
          "function_name": "jaccard_minhash",
          "code": "text(\"4    | 1 | 0\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "4    | 1 | 0",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 583,
          "function_name": "jaccard_minhash",
          "code": "text(\"5    | 0 | 1\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "5    | 0 | 1",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 585,
          "function_name": "jaccard_minhash",
          "code": "text(\"Random hash function induces a permutation over items\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Random hash function induces a permutation over items",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 586,
          "function_name": "jaccard_minhash",
          "code": "text(\"Look at which item is first in A and which item is first in B.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Look at which item is first in A and which item is first in B.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 587,
          "function_name": "jaccard_minhash",
          "code": "text(\"Each item has the same probability as being first (min)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Each item has the same probability as being first (min)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 588,
          "function_name": "jaccard_minhash",
          "code": "text(\"- If 1, 2, 3 is first, then first in A = first in B.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If 1, 2, 3 is first, then first in A = first in B.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 589,
          "function_name": "jaccard_minhash",
          "code": "text(\"- If 4, 5 is first, then first in A \u2260 first in B.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- If 4, 5 is first, then first in A \u2260 first in B.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 592,
          "function_name": "jaccard_minhash",
          "code": "n = 100  # Generate this many random hash functions"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 574,
          "function_name": "minhash",
          "code": "def minhash(S: set[str], seed: int):"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "<genexpr>",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        },
        {
          "path": "lecture_14.py",
          "line_number": 575,
          "function_name": "minhash",
          "code": "return min(mmh3.hash(x, seed) for x in S)"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 593,
          "function_name": "jaccard_minhash",
          "code": "matches = [minhash(A, seed) == minhash(B, seed) for seed in range(n)]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 594,
          "function_name": "jaccard_minhash",
          "code": "estimated_jaccard = count(matches, True) / len(matches)  # @inspect estimated_jaccard"
        }
      ],
      "env": {
        "estimated_jaccard": 0.6
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 595,
          "function_name": "jaccard_minhash",
          "code": "assert abs(estimated_jaccard - jaccard) < 0.01"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 597,
          "function_name": "jaccard_minhash",
          "code": "text(\"Now we can hash our items, but a collision doesn't tell us Jaccard(A, B) > threshold.\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Now we can hash our items, but a collision doesn't tell us Jaccard(A, B) > threshold.",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 399,
          "function_name": "deduplication",
          "code": "jaccard_minhash()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 600,
          "function_name": "locality_sensitive_hashing",
          "code": "def locality_sensitive_hashing():"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 601,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Locality sensitive hashing (LSH) \"), named_link(\"book chapter\", \"http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Locality sensitive hashing (LSH) ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": " [book chapter]",
            "authors": null,
            "organization": null,
            "date": null,
            "url": "http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf",
            "description": null,
            "notes": null
          },
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 603,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Suppose we hash examples just one MinHash function\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Suppose we hash examples just one MinHash function",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 604,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"P[A and B collide] = Jaccard(A, B)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "P[A and B collide] = Jaccard(A, B)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 605,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"On average, more similar items will collide, but very stochastic...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "On average, more similar items will collide, but very stochastic...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 607,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Goal: have A and B collide if Jaccard(A, B) > threshold\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Goal: have A and B collide if Jaccard(A, B) > threshold",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 608,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"We have to somehow sharpen the probabilities...\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "We have to somehow sharpen the probabilities...",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 610,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Solution: use n hash functions\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Solution: use n hash functions",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 611,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Break up into b bands of r hash functions each (n = b * r)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Break up into b bands of r hash functions each (n = b * r)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 613,
          "function_name": "locality_sensitive_hashing",
          "code": "n = 12      # Number of hash functions"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 614,
          "function_name": "locality_sensitive_hashing",
          "code": "b = 3       # Number of bands"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 615,
          "function_name": "locality_sensitive_hashing",
          "code": "r = 4       # Number of hash functions per band"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 616,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Hash functions:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Hash functions:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 617,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"h1 h2 h3 h4  |  h5 h6 h7 h8  |  h9 h10 h11 h12\", verbatim=True)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "h1 h2 h3 h4  |  h5 h6 h7 h8  |  h9 h10 h11 h12",
          "style": {
            "fontFamily": "monospace",
            "whiteSpace": "pre"
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 619,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Key: A and B collide if for *some* band, *all* its hash functions return same value\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Key: A and B collide if for *some* band, *all* its hash functions return same value",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 620,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"As we will see, the and-or structure of the bands sharpens the threshold\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "As we will see, the and-or structure of the bands sharpens the threshold",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 622,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Given Jaccard(A, B), what is the probability that A and B collide?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Given Jaccard(A, B), what is the probability that A and B collide?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "locality_sensitive_hashing",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "b": 3,
        "r": 4
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 629,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"**Example**\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "**Example**",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.8,
        "b": 5,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.10737418240000006
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.43330782041120397
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 630,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = get_prob_collision(sim=0.8, b=5, r=10)  # @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.43330782041120397
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 631,
          "function_name": "locality_sensitive_hashing",
          "code": "image(\"https://cdn.sanity.io/images/vr8gru94/production/b470799575b8e77911bacb8500977afef06d6c85-1280x720.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-5c7429f9fdd2bf58b7c5651aebc8f045-https_cdn_sanity_io_images_vr8gru94_production_b470799575b8e77911bacb8500977afef06d6c85-1280x720_png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 634,
          "function_name": "locality_sensitive_hashing",
          "code": "sims = [0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.98]"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.7,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.028247524899999984
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.24914417423121082
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.75,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.056313514709472656
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.4398848046250401
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.8,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.10737418240000006
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.6788599735928997
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.85,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.1968744043407226
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.8883561842922729
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.9,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.3486784401000001
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9862610183556292
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.95,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.5987369392383787
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.999891783915662
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.98,
        "b": 10,
        "r": 10
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.8170728068875467
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9999999580450986
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 635,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=10) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 637,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Increasing r sharpens the threshold and moves the curve to the right (harder to match)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Increasing r sharpens the threshold and moves the curve to the right (harder to match)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.7,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.0007979226629761189
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.007950636881415285
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.75,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.0031712119389339932
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.03126337888689601
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.8,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.011529215046068483
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.10949086440906874
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.85,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.03875953108451433
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.3265265704029475
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.9,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.12157665459056935
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.7264487568116678
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.95,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.3584859224085419
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9881951109097257
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.24914417423121082,
          "0.75": 0.4398848046250401,
          "0.8": 0.6788599735928997,
          "0.85": 0.8883561842922729,
          "0.9": 0.9862610183556292,
          "0.95": 0.999891783915662,
          "0.98": 0.9999999580450986
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.98,
        "b": 10,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.6676079717550942
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9999835371130633
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 638,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=10, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 640,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Increasing b moves the curve to the left (easier to match)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Increasing b moves the curve to the left (easier to match)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.7,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.0007979226629761189
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.015838061136010495
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.75,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.0031712119389339932
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.061549358914366414
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.8,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.011529215046068483
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.2069934794290924
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.85,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.03875953108451433
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.546433539626784
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.9,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.12157665459056935
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9251697173501179
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.95,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.3584859224085419
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9998606445935663
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.007950636881415285,
          "0.75": 0.03126337888689601,
          "0.8": 0.10949086440906874,
          "0.85": 0.3265265704029475,
          "0.9": 0.7264487568116678,
          "0.95": 0.9881951109097257,
          "0.98": 0.9999835371130633
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 624,
          "function_name": "get_prob_collision",
          "code": "def get_prob_collision(sim, b, r):  # @inspect sim, @inspect b, @inspect r"
        }
      ],
      "env": {
        "sim": 0.98,
        "b": 20,
        "r": 20
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 625,
          "function_name": "get_prob_collision",
          "code": "prob_match = sim ** r                        # Probability that a fixed band matches  @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.6676079717550942
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 626,
          "function_name": "get_prob_collision",
          "code": "prob_collision = 1 - (1 - prob_match) ** b   # Probability that some band matches  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.9999999997289734
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        },
        {
          "path": "lecture_14.py",
          "line_number": 627,
          "function_name": "get_prob_collision",
          "code": "return prob_collision"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 641,
          "function_name": "locality_sensitive_hashing",
          "code": "probs = {sim: get_prob_collision(sim=sim, b=20, r=20) for sim in sims}  # @inspect probs"
        }
      ],
      "env": {
        "probs": {
          "0.7": 0.015838061136010495,
          "0.75": 0.061549358914366414,
          "0.8": 0.2069934794290924,
          "0.85": 0.546433539626784,
          "0.9": 0.9251697173501179,
          "0.95": 0.9998606445935663,
          "0.98": 0.9999999997289734
        }
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 642,
          "function_name": "locality_sensitive_hashing",
          "code": "image(\"https://cdn.sanity.io/images/vr8gru94/production/aace49fa240778e8ecf6e85ad08a2de7f5385566-1280x720.png\", width=600)"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "image",
          "data": "var/files/image-7666e77b1a420b4da170c895b069684e-https_cdn_sanity_io_images_vr8gru94_production_aace49fa240778e8ecf6e85ad08a2de7f5385566-1280x720_png",
          "style": {
            "width": 600
          },
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 644,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Example setting \"), link(\"https://arxiv.org/pdf/2107.06499\"), text(\": n = 9000, b = 20, r = 450\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Example setting ",
          "style": {},
          "external_link": null,
          "internal_link": null
        },
        {
          "type": "link",
          "data": null,
          "style": {},
          "external_link": {
            "title": "Deduplicating Training Data Makes Language Models Better",
            "authors": [
              "Katherine Lee",
              "Daphne Ippolito",
              "Andrew Nystrom",
              "Chiyuan Zhang",
              "Douglas Eck",
              "Chris Callison-Burch",
              "Nicholas Carlini"
            ],
            "organization": null,
            "date": "2021-07-14T06:06:52Z",
            "url": "https://arxiv.org/pdf/2107.06499",
            "description": "We find that existing language modeling datasets contain many near-duplicate examples and long repetitive substrings. As a result, over 1% of the unprompted output of language models trained on these datasets is copied verbatim from the training data. We develop two tools that allow us to deduplicate training datasets -- for example removing from C4 a single 61 word English sentence that is repeated over 60,000 times. Deduplication allows us to train models that emit memorized text ten times less frequently and require fewer train steps to achieve the same or better accuracy. We can also reduce train-test overlap, which affects over 4% of the validation set of standard datasets, thus allowing for more accurate evaluation. We release code for reproducing our work and performing dataset deduplication at https://github.com/google-research/deduplicate-text-datasets.",
            "notes": null
          },
          "internal_link": null
        },
        {
          "type": "markdown",
          "data": ": n = 9000, b = 20, r = 450",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 645,
          "function_name": "locality_sensitive_hashing",
          "code": "b = 20"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 646,
          "function_name": "locality_sensitive_hashing",
          "code": "r = 450"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 647,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"What is the threshold (where the phase transition happens)?\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "What is the threshold (where the phase transition happens)?",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 648,
          "function_name": "locality_sensitive_hashing",
          "code": "threshold = (1 / b) ** (1 / r)  # @inspect threshold"
        }
      ],
      "env": {
        "threshold": 0.9933649271209614
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 649,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Probability that a fixed band matches:\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Probability that a fixed band matches:",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 650,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_match = (1 / b)  # @inspect prob_match"
        }
      ],
      "env": {
        "prob_match": 0.05
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 651,
          "function_name": "locality_sensitive_hashing",
          "code": "text(\"Probability that A and B collide (\u2248 1-1/e):\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "Probability that A and B collide (\u2248 1-1/e):",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 652,
          "function_name": "locality_sensitive_hashing",
          "code": "prob_collision = 1 - (1 - 1 / b) ** b  #  @inspect prob_collision"
        }
      ],
      "env": {
        "prob_collision": 0.6415140775914581
      },
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        },
        {
          "path": "lecture_14.py",
          "line_number": 400,
          "function_name": "deduplication",
          "code": "locality_sensitive_hashing()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 30,
          "function_name": "main",
          "code": "deduplication()"
        }
      ],
      "env": {},
      "renderings": [],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 32,
          "function_name": "main",
          "code": "text(\"### Summary\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "### Summary",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 33,
          "function_name": "main",
          "code": "text(\"- Algorithmic tools: n-gram models (KenLM), classifiers (fastText), importance resampling (DSIR)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Algorithmic tools: n-gram models (KenLM), classifiers (fastText), importance resampling (DSIR)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 34,
          "function_name": "main",
          "code": "text(\"- Applications: language identification, quality filtering, toxicity filtering\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Applications: language identification, quality filtering, toxicity filtering",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 35,
          "function_name": "main",
          "code": "text(\"- Deduplication: hashing scales to large datasets for fuzzy matching\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Deduplication: hashing scales to large datasets for fuzzy matching",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    },
    {
      "stack": [
        {
          "path": "lecture_14.py",
          "line_number": 36,
          "function_name": "main",
          "code": "text(\"- Now you have the tools (mechanics), just have to spend time with data (intuitions)\")"
        }
      ],
      "env": {},
      "renderings": [
        {
          "type": "markdown",
          "data": "- Now you have the tools (mechanics), just have to spend time with data (intuitions)",
          "style": {},
          "external_link": null,
          "internal_link": null
        }
      ],
      "stdout": "",
      "stderr": ""
    }
  ]
}